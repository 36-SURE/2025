[
  {
    "objectID": "lectures/01-explore.html#workflow-diagram",
    "href": "lectures/01-explore.html#workflow-diagram",
    "title": "Exploring data: into the tidyverse",
    "section": "Workflow diagram",
    "text": "Workflow diagram\n\n\n\nSource: R for Data Science (2e)\n\n\n\nExploring data: data wrangling and data visualization\nAspects of data wrangling\n\nimport: load in data (e.g., read_csv())\ntidy: each row is an observation, each column is a variable\ntransform: filter observations, create new variables, etc."
  },
  {
    "objectID": "lectures/01-explore.html#exploratory-data-analysis",
    "href": "lectures/01-explore.html#exploratory-data-analysis",
    "title": "Exploring data: into the tidyverse",
    "section": "Exploratory data analysis",
    "text": "Exploratory data analysis\n\nWhat is the goal of EDA?\n\nto perform initial investigations on the data in order to better understand the data, discover trends/patterns, spot anomalies, etc.\n\n\n\n\n“EDA is an iterative cycle”\n\nquestions about data ⟶ wrangling ⟶ visualization\n\n\n\n\n\n“EDA is a state of mind”\n\n\n\n\nThe term EDA was coined by statistician John Tukey in the 1970s."
  },
  {
    "objectID": "lectures/01-explore.html#exploratory-data-analysis-contd",
    "href": "lectures/01-explore.html#exploratory-data-analysis-contd",
    "title": "Exploring data: into the tidyverse",
    "section": "Exploratory data analysis (cont’d)",
    "text": "Exploratory data analysis (cont’d)\n\nData can be explored numerically (tables, descriptive statistics, etc.) or visually (graphs)\nExamples of questions\n\nWhat type of variation do the variables display?\nWhat type of relationships exist between variables?\n\n\n\n\nEDA is NOT a replacement for statistical inference and learning\n\n\n\n\nEDA is an important and necessary step to build intuition"
  },
  {
    "objectID": "lectures/01-explore.html#first-example-mlb-batting",
    "href": "lectures/01-explore.html#first-example-mlb-batting",
    "title": "Exploring data: into the tidyverse",
    "section": "First example: MLB batting",
    "text": "First example: MLB batting\n\nImport Batting table of historical batting statistics from the Lahman\n\n\nlibrary(tidyverse) # load the tidyverse\nlibrary(Lahman) # load the Lahman package to access its datasets\nBatting &lt;- as_tibble(Batting) # initialize the Batting dataset\n\n\n\nBasic info about the Batting dataset\n\n\n# number of rows and columns\n# can also do nrow(Batting) and ncol(Batting)\ndim(Batting) \n\n[1] 113799     22\n\n\n\nclass(Batting)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\n\n\n\n\ntbl (pronounced tibble) is the tidyverse way of storing tabular data, like a spreadsheet or data.frame"
  },
  {
    "objectID": "lectures/01-explore.html#first-example-mlb-batting-1",
    "href": "lectures/01-explore.html#first-example-mlb-batting-1",
    "title": "Exploring data: into the tidyverse",
    "section": "First example: MLB batting",
    "text": "First example: MLB batting\n\nView the first 6 (by default) rows with head()\n\n\n# try just typing Batting into your console, what happens?\n# also try glimpse(Batting)\nhead(Batting) \n\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n6 aardsda01   2010     1 SEA    AL       53     0     0     0     0     0     0\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;\n\n\n\nIs the Batting dataset tidy?\n\nEach row: a player’s season stint with a team (i.e. players can play for multiple teams in year)\nEach column: different measurement or recording about the player-team-season observation (get all column names with colnames(Batting) or names(Batting))"
  },
  {
    "objectID": "lectures/01-explore.html#descriptive-statistics",
    "href": "lectures/01-explore.html#descriptive-statistics",
    "title": "Exploring data: into the tidyverse",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nSummarize quantitative (e.g. yearID, AB) and categorical (e.g. teamID, lgID) variables in different ways…\n\n\nSummary statistics for quantitative variables with the summary() function\n\n\nsummary(Batting$yearID)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1871    1939    1979    1970    2004    2023 \n\n\n\nCounts of categorical variables with the table() function\n\n\n# be careful it ignores NA values\n# can do table(Batting$lgID, useNA = \"always\")\ntable(Batting$lgID)\n\n\n   AA    AL    FL    NA    NL    PL    UA \n 1893 52599   472   737 57615   149   334"
  },
  {
    "objectID": "lectures/01-explore.html#the-dplyr-package",
    "href": "lectures/01-explore.html#the-dplyr-package",
    "title": "Exploring data: into the tidyverse",
    "section": "The dplyr package",
    "text": "The dplyr package\n\ndplyr is a package within the tidyverse with functions for data wrangling\nThe dplyr data verbs for manipulating data\n\nfilter()\nselect()\narrange()\nmutate()\ngroup_by()\nsummarize()"
  },
  {
    "objectID": "lectures/01-explore.html#filter",
    "href": "lectures/01-explore.html#filter",
    "title": "Exploring data: into the tidyverse",
    "section": "filter()",
    "text": "filter()\n\nUse filter() to extract ROWS (observations) that meet certain conditions\nNeed to specify a logical condition (aka boolean expression)"
  },
  {
    "objectID": "lectures/01-explore.html#filter-1",
    "href": "lectures/01-explore.html#filter-1",
    "title": "Exploring data: into the tidyverse",
    "section": "filter()",
    "text": "filter()\nExample: Extract batting stats for 2 leagues AL and NL only\n\nfilter(Batting, lgID %in% c(\"AL\", \"NL\")) # or filter(Batting, lgID == \"AL\" | lgID == \"NL\")\n\n# A tibble: 110,214 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n 2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n 3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n 4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n 5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n 6 aardsda01   2010     1 SEA    AL       53     0     0     0     0     0     0\n 7 aardsda01   2012     1 NYA    AL        1     0     0     0     0     0     0\n 8 aardsda01   2013     1 NYN    NL       43     0     0     0     0     0     0\n 9 aardsda01   2015     1 ATL    NL       33     1     0     0     0     0     0\n10 aaronha01   1954     1 ML1    NL      122   468    58   131    27     6    13\n# ℹ 110,204 more rows\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#filter-2",
    "href": "lectures/01-explore.html#filter-2",
    "title": "Exploring data: into the tidyverse",
    "section": "filter()",
    "text": "filter()\nExample: Extract batting stats for Pirates players in 2022\n\n# multiple conditions\nfilter(Batting, yearID == 2022 & teamID == \"PIT\")\n\n# A tibble: 68 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 alforan01   2022     1 PIT    NL        2     4     0     1     0     0     0\n 2 alldrca01   2022     1 PIT    NL        1     0     0     0     0     0     0\n 3 allengr01   2022     1 PIT    NL       46   118    17    22     4     0     2\n 4 andujmi01   2022     2 PIT    NL        9    36     4     9     3     1     0\n 5 baeji01     2022     1 PIT    NL       10    33     5    11     3     0     0\n 6 bandaan01   2022     1 PIT    NL       23     0     0     0     0     0     0\n 7 banuema01   2022     2 PIT    NL       31     0     0     0     0     0     0\n 8 bednada01   2022     1 PIT    NL       45     0     0     0     0     0     0\n 9 beedety01   2022     2 PIT    NL       25     0     0     0     0     0     0\n10 briceau01   2022     1 PIT    NL        4     0     0     0     0     0     0\n# ℹ 58 more rows\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#logical-conditions",
    "href": "lectures/01-explore.html#logical-conditions",
    "title": "Exploring data: into the tidyverse",
    "section": "Logical conditions",
    "text": "Logical conditions\n\n\n\nx &lt; y: less than\nx &lt;= y: less than or equal to\nx == y: equal to\nx != y: not equal to\nx &gt; y: greater than\nx &gt;= y: greater than or equal to\n\n\n\nx %in% y: whether the value is present in a given vector\nis.na(x): is missing\n!is.na(x): is not missing\nx & y: and\nx | y: or\n!x: not\n\n\n… and basically anything that returns a TRUE/FALSE value"
  },
  {
    "objectID": "lectures/01-explore.html#common-mistakes",
    "href": "lectures/01-explore.html#common-mistakes",
    "title": "Exploring data: into the tidyverse",
    "section": "Common mistakes",
    "text": "Common mistakes\n\n\n\n= instead of ==\n\nnay\n\nfilter(Batting, team = \"PIT\")\n\nyay\n\nfilter(Batting, team == \"PIT\")\n\n\n\nForgetting quotes (for string/character)\n\nnay\n\nfilter(Batting, team == PIT)\n\nyay\n\nfilter(Batting, team == \"PIT\")"
  },
  {
    "objectID": "lectures/01-explore.html#select",
    "href": "lectures/01-explore.html#select",
    "title": "Exploring data: into the tidyverse",
    "section": "select()",
    "text": "select()\n\nUse select() to extract COLUMNS (variables) of interest\nJust simply specify the column names…\n\n\nselect(Batting, playerID, yearID, G, AB, R, H, HR, BB)\n\n# A tibble: 113,799 × 8\n   playerID  yearID     G    AB     R     H    HR    BB\n   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 aardsda01   2004    11     0     0     0     0     0\n 2 aardsda01   2006    45     2     0     0     0     0\n 3 aardsda01   2007    25     0     0     0     0     0\n 4 aardsda01   2008    47     1     0     0     0     0\n 5 aardsda01   2009    73     0     0     0     0     0\n 6 aardsda01   2010    53     0     0     0     0     0\n 7 aardsda01   2012     1     0     0     0     0     0\n 8 aardsda01   2013    43     0     0     0     0     0\n 9 aardsda01   2015    33     1     0     0     0     0\n10 aaronha01   1954   122   468    58   131    13    28\n# ℹ 113,789 more rows"
  },
  {
    "objectID": "lectures/01-explore.html#mutate",
    "href": "lectures/01-explore.html#mutate",
    "title": "Exploring data: into the tidyverse",
    "section": "mutate()",
    "text": "mutate()\n\nUse mutate() to create new variables\nNew variables created via mutate() are usually based on existing variables\n\nMake sure to give your new variable a name\nNote that naming the new variable the same as the existing variable will overwrite the original column"
  },
  {
    "objectID": "lectures/01-explore.html#mutate-1",
    "href": "lectures/01-explore.html#mutate-1",
    "title": "Exploring data: into the tidyverse",
    "section": "mutate()",
    "text": "mutate()\nExample: Get the batting average and strikeout-to-walk ratio for every player\n\nmutate(Batting, batting_avg = H / AB, so_bb_ratio = SO / BB)\n\n# A tibble: 113,799 × 24\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n 2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n 3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n 4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n 5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n 6 aardsda01   2010     1 SEA    AL       53     0     0     0     0     0     0\n 7 aardsda01   2012     1 NYA    AL        1     0     0     0     0     0     0\n 8 aardsda01   2013     1 NYN    NL       43     0     0     0     0     0     0\n 9 aardsda01   2015     1 ATL    NL       33     1     0     0     0     0     0\n10 aaronha01   1954     1 ML1    NL      122   468    58   131    27     6    13\n# ℹ 113,789 more rows\n# ℹ 12 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;, batting_avg &lt;dbl&gt;,\n#   so_bb_ratio &lt;dbl&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#arrange",
    "href": "lectures/01-explore.html#arrange",
    "title": "Exploring data: into the tidyverse",
    "section": "arrange()",
    "text": "arrange()\n\nSort observations (rows) by variables (columns)\n\nascending order is the default (low to high for numeric columns, alphabetical order for character columns)\n\n\n\nExample: Who holds the single-season home run record?\n\narrange(Batting, desc(HR)) # desc() for descending order\n\n# A tibble: 113,799 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 bondsba01   2001     1 SFN    NL      153   476   129   156    32     2    73\n 2 mcgwima01   1998     1 SLN    NL      155   509   130   152    21     0    70\n 3 sosasa01    1998     1 CHN    NL      159   643   134   198    20     0    66\n 4 mcgwima01   1999     1 SLN    NL      153   521   118   145    21     1    65\n 5 sosasa01    2001     1 CHN    NL      160   577   146   189    34     5    64\n 6 sosasa01    1999     1 CHN    NL      162   625   114   180    24     2    63\n 7 judgeaa01   2022     1 NYA    AL      157   570   133   177    28     0    62\n 8 marisro01   1961     1 NYA    AL      161   590   132   159    16     4    61\n 9 ruthba01    1927     1 NYA    AL      151   540   158   192    29     8    60\n10 ruthba01    1921     1 NYA    AL      152   540   177   204    44    16    59\n# ℹ 113,789 more rows\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#arrange-1",
    "href": "lectures/01-explore.html#arrange-1",
    "title": "Exploring data: into the tidyverse",
    "section": "arrange()",
    "text": "arrange()\nExample: arrange by multiple columns — at bats from high to low (first sort), then home runs from low to high (second sort) — variable order matters\n\narrange(Batting, desc(AB), HR)\n\n# A tibble: 113,799 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1 rolliji01   2007     1 PHI    NL      162   716   139   212    38    20    30\n 2 wilsowi02   1980     1 KCA    AL      161   705   133   230    28    15     3\n 3 suzukic01   2004     1 SEA    AL      161   704   101   262    24     5     8\n 4 samueju01   1984     1 PHI    NL      160   701   105   191    36    19    15\n 5 pierrju01   2006     1 CHN    NL      162   699    87   204    32    13     3\n 6 cashda01    1975     1 PHI    NL      162   699   111   213    40     3     4\n 7 alouma01    1969     1 PIT    NL      162   698   105   231    41     6     1\n 8 reyesjo01   2005     1 NYN    NL      161   696    99   190    24    17     7\n 9 jensewo01   1936     1 PIT    NL      153   696    98   197    34    10    10\n10 soriaal01   2002     1 NYA    AL      156   696   128   209    51     2    39\n# ℹ 113,789 more rows\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#performing-multiple-operations",
    "href": "lectures/01-explore.html#performing-multiple-operations",
    "title": "Exploring data: into the tidyverse",
    "section": "Performing multiple operations",
    "text": "Performing multiple operations\n\nWhat if we want to perform several different tasks using multiple dplyr verbs?\n\n\n\nIntroducing the pipe operator |&gt;\n\n\n\n\nYou might have seen the magrittr pipe %&gt;%…\n\n…from the maggritr package, automatically loaded when loading tidyverse\n\nRecently, many people (including Hadley Wickham) have switched to |&gt;, the built-in “native” pipe to base R\n\nWhat are the differences?\n\n\n\n\n\nShortcut for the pipe operator in RStudio: Command (or Ctrl) + Shift + M"
  },
  {
    "objectID": "lectures/01-explore.html#the-pipe-operator",
    "href": "lectures/01-explore.html#the-pipe-operator",
    "title": "Exploring data: into the tidyverse",
    "section": "The pipe operator",
    "text": "The pipe operator\n\nUse |&gt; to perform a sequence of operations\nThe pipe takes an object (e.g., tibble, data frame, matrix, vector, etc.) on the left and passes it as the first argument of the function on the right\n\n\n# the workflow\nobject |&gt;\n  first_operation(...) |&gt;\n  second_operation(...) |&gt; \n  .\n  .\n  .\n  last_operation(...)"
  },
  {
    "objectID": "lectures/01-explore.html#performing-multiple-operations-1",
    "href": "lectures/01-explore.html#performing-multiple-operations-1",
    "title": "Exploring data: into the tidyverse",
    "section": "Performing multiple operations",
    "text": "Performing multiple operations\nExample: Which Pirates players had the highest batting average in 2022, among those with at least 50 at bats?\n\nWhat are the tasks to be done here?\n\n\n\nfilter(): only Pirates players in 2022 with at least 50 at bats\nmutate(): create a new column for batting average\narrange(): sort by batting average in descending order\nselect(): report player name, at bats, and batting average"
  },
  {
    "objectID": "lectures/01-explore.html#performing-multiple-operations-2",
    "href": "lectures/01-explore.html#performing-multiple-operations-2",
    "title": "Exploring data: into the tidyverse",
    "section": "Performing multiple operations",
    "text": "Performing multiple operations\n\nBatting |&gt; \n  filter(yearID == 2022, teamID == \"PIT\", AB &gt;= 50) |&gt; \n  mutate(batting_avg = H / AB) |&gt; \n  arrange(desc(batting_avg)) |&gt; \n  select(playerID, AB, batting_avg)\n\n# A tibble: 23 × 3\n   playerID     AB batting_avg\n   &lt;chr&gt;     &lt;int&gt;       &lt;dbl&gt;\n 1 newmake01   288       0.274\n 2 reynobr01   542       0.262\n 3 hayeske01   505       0.244\n 4 marisja01    77       0.234\n 5 perezro02    60       0.233\n 6 castrro01   253       0.233\n 7 cruzon01    331       0.233\n 8 gamelbe01   371       0.232\n 9 chavimi01   401       0.229\n10 vogelda01   237       0.228\n# ℹ 13 more rows\n\n\n\nWithout the pipe, the code looks every ugly with functions nested within functions…\n\nselect(arrange(mutate(filter(Batting, yearID == 2022, teamID == \"PIT\", AB &gt;= 50), batting_avg = H / AB), \ndesc(batting_avg)), playerID, AB, batting_avg)"
  },
  {
    "objectID": "lectures/01-explore.html#summarize-by-itself",
    "href": "lectures/01-explore.html#summarize-by-itself",
    "title": "Exploring data: into the tidyverse",
    "section": "summarize() (by itself)",
    "text": "summarize() (by itself)\n\nUse summarize() to collapse the data down to a single row (per group) by aggregating variables into single values\nUseful for computing summaries (e.g., mean, median, max, min, correlation, etc.)\n\n\nBatting |&gt; \n  summarize(median_at_bats = median(AB))\n\n# A tibble: 1 × 1\n  median_at_bats\n           &lt;int&gt;\n1             44\n\nBatting |&gt; \n  summarize(cor_ab_hr = cor(AB, HR))\n\n# A tibble: 1 × 1\n  cor_ab_hr\n      &lt;dbl&gt;\n1     0.706"
  },
  {
    "objectID": "lectures/01-explore.html#group_by-and-summarize",
    "href": "lectures/01-explore.html#group_by-and-summarize",
    "title": "Exploring data: into the tidyverse",
    "section": "group_by() and summarize()",
    "text": "group_by() and summarize()\n\ngroup_by() converts the data into a “grouped tbl” where operations are performed by group\n\ni.e., it splits the data into groups based on values in a column\n\ngroup_by() becomes powerful when combining with summarize()\nAfter the operation at the group-level is done, use ungroup() to remove grouping"
  },
  {
    "objectID": "lectures/01-explore.html#group_by-and-summarize-1",
    "href": "lectures/01-explore.html#group_by-and-summarize-1",
    "title": "Exploring data: into the tidyverse",
    "section": "group_by() and summarize()",
    "text": "group_by() and summarize()\nExample: How many home runs, strike outs, and walks did each team accumulate in each season from 2015 to 2019?\n\nBatting |&gt; \n  filter(yearID %in% 2015:2019) |&gt; \n  group_by(teamID) |&gt; \n  summarize(total_hr = sum(HR), total_so = sum(SO), total_bb = sum(BB)) |&gt; \n  arrange(desc(total_hr))\n\n# A tibble: 30 × 4\n   teamID total_hr total_so total_bb\n   &lt;fct&gt;     &lt;int&gt;    &lt;int&gt;    &lt;int&gt;\n 1 NYA        1209     6659     2839\n 2 HOU        1159     6294     2759\n 3 TOR        1139     6741     2752\n 4 LAN        1111     6751     2991\n 5 BAL        1103     6914     2162\n 6 TEX        1041     7008     2572\n 7 SEA        1036     6693     2489\n 8 MIN        1035     6694     2604\n 9 OAK        1033     6474     2610\n10 MIL        1031     7434     2724\n# ℹ 20 more rows"
  },
  {
    "objectID": "lectures/01-explore.html#count",
    "href": "lectures/01-explore.html#count",
    "title": "Exploring data: into the tidyverse",
    "section": "count()",
    "text": "count()\n\n\ncount() returns the number of observations in each group\n\nBatting |&gt; \n  count(lgID, name = \"freq\")\n\n# A tibble: 7 × 2\n  lgID   freq\n  &lt;fct&gt; &lt;int&gt;\n1 AA     1893\n2 AL    52599\n3 FL      472\n4 NA      737\n5 NL    57615\n6 PL      149\n7 UA      334\n\n\n\n# recall that in base R...\ntable(Batting$lgID)\n\n\n   AA    AL    FL    NA    NL    PL    UA \n 1893 52599   472   737 57615   149   334 \n\n\n\nThis can also be done with group_by() and summarize()\n\n# note: count is a \"shortcut\" of this\nBatting |&gt; \n  group_by(lgID) |&gt; \n  summarize(freq = n()) |&gt; \n  ungroup()\n\n# A tibble: 7 × 2\n  lgID   freq\n  &lt;fct&gt; &lt;int&gt;\n1 AA     1893\n2 AL    52599\n3 FL      472\n4 NA      737\n5 NL    57615\n6 PL      149\n7 UA      334"
  },
  {
    "objectID": "lectures/01-explore.html#slice_-family-for-subsetting-rows",
    "href": "lectures/01-explore.html#slice_-family-for-subsetting-rows",
    "title": "Exploring data: into the tidyverse",
    "section": "slice_*() family for subsetting rows",
    "text": "slice_*() family for subsetting rows\n\nslice(): extract rows (observations) based on the row index\n\n\nBatting |&gt; \n  slice(c(1, 99, 101, 500))\n\n# A tibble: 4 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n2 abbotgl01   1973     1 OAK    AL        5     0     0     0     0     0     0\n3 abbotgl01   1975     1 OAK    AL       30     0     0     0     0     0     0\n4 adamshe01   1949     1 CHA    AL       56   208    26    61     5     3     0\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#slice_-family-for-subsetting-rows-1",
    "href": "lectures/01-explore.html#slice_-family-for-subsetting-rows-1",
    "title": "Exploring data: into the tidyverse",
    "section": "slice_*() family for subsetting rows",
    "text": "slice_*() family for subsetting rows\n\nslice_head() / slice_tail(): extract the first / last n rows\n\n\n# Batting |&gt; slice_tail(n = 5)\nBatting |&gt; \n  slice_head(n = 5)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#slice_-family-for-subsetting-rows-2",
    "href": "lectures/01-explore.html#slice_-family-for-subsetting-rows-2",
    "title": "Exploring data: into the tidyverse",
    "section": "slice_*() family for subsetting rows",
    "text": "slice_*() family for subsetting rows\n\nslice_min() / slice_max(): extract rows with the smallest or largest values of a variable\n\n\n# single-season home run record (top 5)\nBatting |&gt; \n  slice_max(HR, n = 5)\n\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  &lt;chr&gt;      &lt;int&gt; &lt;int&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 bondsba01   2001     1 SFN    NL      153   476   129   156    32     2    73\n2 mcgwima01   1998     1 SLN    NL      155   509   130   152    21     0    70\n3 sosasa01    1998     1 CHN    NL      159   643   134   198    20     0    66\n4 mcgwima01   1999     1 SLN    NL      153   521   118   145    21     1    65\n5 sosasa01    2001     1 CHN    NL      160   577   146   189    34     5    64\n# ℹ 10 more variables: RBI &lt;int&gt;, SB &lt;int&gt;, CS &lt;int&gt;, BB &lt;int&gt;, SO &lt;int&gt;,\n#   IBB &lt;int&gt;, HBP &lt;int&gt;, SH &lt;int&gt;, SF &lt;int&gt;, GIDP &lt;int&gt;"
  },
  {
    "objectID": "lectures/01-explore.html#slice_-family-for-subsetting-rows-3",
    "href": "lectures/01-explore.html#slice_-family-for-subsetting-rows-3",
    "title": "Exploring data: into the tidyverse",
    "section": "slice_*() family for subsetting rows",
    "text": "slice_*() family for subsetting rows\n\nslice_sample(): randomly sample a specified number / fraction of observation in the data\n\nUseful for performing resampling (e.g., bootstrap, cross-validation, etc.)\n\n# randomly sample 1000 rows (without replacement, by default)\nBatting |&gt; \n  slice_sample(n = 1000)\n\n# randomly sample 70% of the rows, with replacement\nBatting |&gt; \n  slice_sample(prop = 0.7, replace = TRUE)"
  },
  {
    "objectID": "lectures/01-explore.html#putting-it-all-together",
    "href": "lectures/01-explore.html#putting-it-all-together",
    "title": "Exploring data: into the tidyverse",
    "section": "Putting it all together",
    "text": "Putting it all together\nExample: Get batting stats for each year: each row is a year with the following variables\n\ntotal hits, home runs, strikeouts, walks, atbats\ntotal batting average for each year = total H / total AB\nonly keeps AL and NL leagues\n\n\n\nyearly_batting &lt;- Batting |&gt;\n  filter(lgID %in% c(\"AL\", \"NL\")) |&gt;\n  group_by(yearID) |&gt;\n  summarize(total_h = sum(H, na.rm = TRUE),\n            total_hr = sum(HR, na.rm = TRUE),\n            total_so = sum(SO, na.rm = TRUE),\n            total_bb = sum(BB, na.rm = TRUE),\n            total_ab = sum(AB, na.rm = TRUE)) |&gt;\n  mutate(batting_avg = total_h / total_ab)"
  },
  {
    "objectID": "lectures/01-explore.html#putting-it-all-together-1",
    "href": "lectures/01-explore.html#putting-it-all-together-1",
    "title": "Exploring data: into the tidyverse",
    "section": "Putting it all together",
    "text": "Putting it all together\nWhat are the top three years with the most HRs?\n\n\nyearly_batting |&gt; \n  slice_max(total_hr, n = 3)\n\n# A tibble: 3 × 7\n  yearID total_h total_hr total_so total_bb total_ab batting_avg\n   &lt;int&gt;   &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;       &lt;dbl&gt;\n1   2019   42039     6776    42823    15895   166651       0.252\n2   2017   42215     6105    40104    15829   165567       0.255\n3   2021   39484     5944    42145    15794   161941       0.244\n\n\n\n# or this \nyearly_batting |&gt;\n  arrange(desc(total_hr)) |&gt;\n  slice(1:3)\n\n# A tibble: 3 × 7\n  yearID total_h total_hr total_so total_bb total_ab batting_avg\n   &lt;int&gt;   &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;       &lt;dbl&gt;\n1   2019   42039     6776    42823    15895   166651       0.252\n2   2017   42215     6105    40104    15829   165567       0.255\n3   2021   39484     5944    42145    15794   161941       0.244"
  },
  {
    "objectID": "lectures/01-explore.html#putting-it-all-together-2",
    "href": "lectures/01-explore.html#putting-it-all-together-2",
    "title": "Exploring data: into the tidyverse",
    "section": "Putting it all together",
    "text": "Putting it all together\nWhich years have the best and worst strikeout to walk ratios?\n\n\nyearly_batting |&gt;\n  mutate(so_bb_ratio = total_so / total_bb) |&gt;\n  arrange(so_bb_ratio) |&gt;\n  slice(c(1, n()))\n\n# A tibble: 2 × 8\n  yearID total_h total_hr total_so total_bb total_ab batting_avg so_bb_ratio\n   &lt;int&gt;   &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;    &lt;int&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1   1893   15913      460     3341     6143    56898       0.280       0.544\n2   1879    6171       58     1843      508    24155       0.255       3.63"
  },
  {
    "objectID": "lectures/01-explore.html#whats-next",
    "href": "lectures/01-explore.html#whats-next",
    "title": "Exploring data: into the tidyverse",
    "section": "What’s next?",
    "text": "What’s next?\n\n\nDATA VISUALIZATION\n\nThe simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey\n\n\nUse ggplot2 (and the grammar of graphics) to visually explore data\nMore intuitive than base R plotting\nDifferent types of visualizations for categorical and quantitative data, faceting, etc.\ndplyr verbs and |&gt; leads to natural pipeline for EDA"
  },
  {
    "objectID": "lectures/01-explore.html#check-out-this-song",
    "href": "lectures/01-explore.html#check-out-this-song",
    "title": "Exploring data: into the tidyverse",
    "section": "Check out this song",
    "text": "Check out this song"
  },
  {
    "objectID": "lectures/02-graphics.html#goals-of-data-visualization",
    "href": "lectures/02-graphics.html#goals-of-data-visualization",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Goals of data visualization",
    "text": "Goals of data visualization\n\nto represent the data in a visual way (enough with tables… though tables are useful in a lot of situations)\n\n\n\nmost importantly, to deliver the information to your audience and help them understand the story behind the data\n\n\n\n\nData Visualization (good DataViz anyway) answers a question. - Greggy J. M."
  },
  {
    "objectID": "lectures/02-graphics.html#always-visualize-your-data-before-modeling-and-analysis",
    "href": "lectures/02-graphics.html#always-visualize-your-data-before-modeling-and-analysis",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "ALWAYS visualize your data before modeling and analysis",
    "text": "ALWAYS visualize your data before modeling and analysis\nAnscombe’s quartet\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# A tibble: 4 × 6\n  set   x_mean x_var y_mean y_var x_y_cor\n  &lt;chr&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 1          9    11   7.50  4.13   0.816\n2 2          9    11   7.50  4.13   0.816\n3 3          9    11   7.5   4.12   0.816\n4 4          9    11   7.50  4.12   0.817"
  },
  {
    "objectID": "lectures/02-graphics.html#always-visualize-your-data-before-modeling-and-analysis-1",
    "href": "lectures/02-graphics.html#always-visualize-your-data-before-modeling-and-analysis-1",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "ALWAYS visualize your data before modeling and analysis",
    "text": "ALWAYS visualize your data before modeling and analysis\nThe Datasaurus dozen\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# A tibble: 13 × 6\n   dataset    x_mean x_var y_mean y_var x_y_cor\n   &lt;chr&gt;       &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n 1 away         54.3  281.   47.8  726. -0.0641\n 2 bullseye     54.3  281.   47.8  726. -0.0686\n 3 circle       54.3  281.   47.8  725. -0.0683\n 4 dino         54.3  281.   47.8  726. -0.0645\n 5 dots         54.3  281.   47.8  725. -0.0603\n 6 h_lines      54.3  281.   47.8  726. -0.0617\n 7 high_lines   54.3  281.   47.8  726. -0.0685\n 8 slant_down   54.3  281.   47.8  726. -0.0690\n 9 slant_up     54.3  281.   47.8  726. -0.0686\n10 star         54.3  281.   47.8  725. -0.0630\n11 v_lines      54.3  281.   47.8  726. -0.0694\n12 wide_lines   54.3  281.   47.8  726. -0.0666\n13 x_shape      54.3  281.   47.8  725. -0.0656"
  },
  {
    "objectID": "lectures/02-graphics.html#viz-crime",
    "href": "lectures/02-graphics.html#viz-crime",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Viz crime?",
    "text": "Viz crime?\nFlorence Nightingale’s rose diagram"
  },
  {
    "objectID": "lectures/02-graphics.html#viz-crime-1",
    "href": "lectures/02-graphics.html#viz-crime-1",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Viz crime?",
    "text": "Viz crime?"
  },
  {
    "objectID": "lectures/02-graphics.html#previously",
    "href": "lectures/02-graphics.html#previously",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Previously…",
    "text": "Previously…\nGet batting stats for each year: each row is a year with the following variables\ntotal hits, home runs, strikeouts, walks, atbats total batting average for each year = total H / total AB only keeps AL and NL leagues"
  },
  {
    "objectID": "lectures/02-graphics.html#previously-1",
    "href": "lectures/02-graphics.html#previously-1",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Previously…",
    "text": "Previously…\n\n\nYearly MLB batting statistics from Lahman with tidyverse:\n\ntotal hits, home runs, strikeouts, walks, at bats\ntotal batting average for each year= total H / total AB\nonly keeps AL and NL leagues\n\n\nlibrary(tidyverse)\nlibrary(Lahman) \nyearly_batting &lt;- Batting |&gt;\n  filter(lgID %in% c(\"AL\", \"NL\")) |&gt;\n  group_by(yearID) |&gt;\n  summarize(total_h = sum(H, na.rm = TRUE),\n            total_hr = sum(HR, na.rm = TRUE),\n            total_so = sum(SO, na.rm = TRUE),\n            total_bb = sum(BB, na.rm = TRUE),\n            total_ab = sum(AB, na.rm = TRUE)) |&gt;\n  mutate(batting_avg = total_h / total_ab)\n\n\nHow do we make data visualization?\nWhat are the steps to make this figure below?"
  },
  {
    "objectID": "lectures/02-graphics.html#the-grammar-of-graphics",
    "href": "lectures/02-graphics.html#the-grammar-of-graphics",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "The grammar of graphics",
    "text": "The grammar of graphics\n\nKey idea: specify plotting “layers” and combine them to produce a graphic\nggplot2 provides an implementation of the grammar of graphics\nThe following layers are building blocks of data graphics\n\n\n\ndata - one or more datasets (in tidy tabular format)\ngeom - geometric objects to visually represent the data (e.g. points, lines, bars, etc.)\naes - mappings of variables to visual properties (i.e. aesthetics) of the geometric objects\nscale - one scale for each variable displayed (e.g. axis limits, log scale, colors, etc.)\nfacet - similar subplots (i.e. facets) for subsets of the same data using a conditioning variable\nstat - statistical transformations and summaries (e.g. identity, count, smooth, quantile, etc.)\ncoord - one or more coordinate systems (e.g. cartesian, polar, map projection)\nlabs - labels/guides for each variable and other parts of the plot (e.g. title, subtitle, caption, etc.)\ntheme - customization of plot layout (e.g. text size, alignment, legend position, etc.)\n\n\n\n\nLeland Wilkinson wrote the book “The Grammar of Graphics”, originally published in 1999."
  },
  {
    "objectID": "lectures/02-graphics.html#first-start-with-the-data",
    "href": "lectures/02-graphics.html#first-start-with-the-data",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "First, start with the data",
    "text": "First, start with the data\n\n\n\n\nggplot(data = yearly_batting)\n\n\nor equivalently, using |&gt;\n\nyearly_batting |&gt; \n  ggplot()\n\n\nSo far, nothing is displayed"
  },
  {
    "objectID": "lectures/02-graphics.html#specify-variables-and-geometric-object",
    "href": "lectures/02-graphics.html#specify-variables-and-geometric-object",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Specify variables and geometric object",
    "text": "Specify variables and geometric object\n\n\n\n\nyearly_batting |&gt; \n  ggplot() +\n  geom_point(aes(x = yearID, y = total_hr))\n\n\nAdding (+) a geometric layer of points to the plot\nMap yearID to the x-axis and total_hr to the y-axis via aes()\nImplicitly using coord_cartesian()\n\n\nyearly_batting |&gt; \n  ggplot() + \n  geom_point(aes(x = yearID, y = total_hr)) +\n  coord_cartesian()"
  },
  {
    "objectID": "lectures/02-graphics.html#now-can-we-add-another-geometric-layer",
    "href": "lectures/02-graphics.html#now-can-we-add-another-geometric-layer",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Now, can we add another geometric layer?",
    "text": "Now, can we add another geometric layer?\n\n\n\n\nyearly_batting |&gt; \n  ggplot() +\n  geom_point(aes(x = yearID, y = total_hr)) +\n  geom_line(aes(x = yearID, y = total_hr))\n\n\nAdding (+) a line geometric layer\nInclude mappings shared across geometric layers inside ggplot()\n\n\nyearly_batting |&gt;\n  ggplot(aes(x = yearID, y = total_hr)) +\n  geom_point() +\n  geom_line()"
  },
  {
    "objectID": "lectures/02-graphics.html#scaling-axes-changing-axis-label-breaks",
    "href": "lectures/02-graphics.html#scaling-axes-changing-axis-label-breaks",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Scaling axes: changing axis label breaks",
    "text": "Scaling axes: changing axis label breaks\n\n\n\n\nyearly_batting |&gt;\n  ggplot(aes(x = yearID, y = total_hr)) +\n  geom_point() +\n  geom_line() +\n  scale_y_continuous(breaks = seq(0, 6000, 1000))"
  },
  {
    "objectID": "lectures/02-graphics.html#scaling-axes-customizing-axis-limits",
    "href": "lectures/02-graphics.html#scaling-axes-customizing-axis-limits",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Scaling axes: customizing axis limits",
    "text": "Scaling axes: customizing axis limits\n\n\n\n\nyearly_batting |&gt;\n  ggplot(aes(x = yearID, y = total_hr)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2015))"
  },
  {
    "objectID": "lectures/02-graphics.html#scaling-axes-having-different-axis-scales",
    "href": "lectures/02-graphics.html#scaling-axes-having-different-axis-scales",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Scaling axes: having different axis scales",
    "text": "Scaling axes: having different axis scales\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point() +\n  geom_line() + \n  scale_x_reverse() +\n  scale_y_log10()\n\nWe can easily adjust variable scales without directly modifying the columns in the data"
  },
  {
    "objectID": "lectures/02-graphics.html#adding-a-statistical-summary",
    "href": "lectures/02-graphics.html#adding-a-statistical-summary",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Adding a statistical summary",
    "text": "Adding a statistical summary\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point() +\n  geom_line() + \n  stat_smooth()\n\n\nSmoothing regression summary (will cover later) using yearID and total_hr\nGeometric layers implicitly use a default statistical summary\nTechnically we’re already using geom_point(stat = \"identity\")\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point() +\n  geom_line() +\n  geom_smooth()"
  },
  {
    "objectID": "lectures/02-graphics.html#mapping-additional-variables",
    "href": "lectures/02-graphics.html#mapping-additional-variables",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Mapping additional variables",
    "text": "Mapping additional variables\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr,\n             color = total_so,\n             size = total_bb)) +\n  geom_point() +\n  geom_line()\n\n\ntotal_hr, total_so, and total_bb are all displayed\ncolor and size are being shared globally across layers\nThis is a bit odd to look at…"
  },
  {
    "objectID": "lectures/02-graphics.html#customizing-mappings-by-layer",
    "href": "lectures/02-graphics.html#customizing-mappings-by-layer",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Customizing mappings by layer",
    "text": "Customizing mappings by layer\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line()\n\n\nNow mapping total_so and total_bb to color and size of the point layer only"
  },
  {
    "objectID": "lectures/02-graphics.html#changing-aesthetics-without-mapping-variables",
    "href": "lectures/02-graphics.html#changing-aesthetics-without-mapping-variables",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Changing aesthetics without mapping variables",
    "text": "Changing aesthetics without mapping variables\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\")\n\n\nManually set the color and linetype of the line layer"
  },
  {
    "objectID": "lectures/02-graphics.html#remember-one-scale-for-each-mapped-variable",
    "href": "lectures/02-graphics.html#remember-one-scale-for-each-mapped-variable",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Remember: one scale for each mapped variable",
    "text": "Remember: one scale for each mapped variable\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\") +\n  scale_color_gradient(low = \"darkblue\", high = \"gold\") +\n  scale_size_continuous(breaks = seq(0, 20000, 2500))"
  },
  {
    "objectID": "lectures/02-graphics.html#always-label-your-plots-seriously",
    "href": "lectures/02-graphics.html#always-label-your-plots-seriously",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Always label your plots! (seriously…)",
    "text": "Always label your plots! (seriously…)\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\") +\n  scale_color_gradient(low = \"darkblue\", high = \"gold\") +\n  labs(\n    x = \"Year\",\n    y = \"Homeruns\",\n    color = \"Strikeouts\",\n    size = \"Walks\",\n    title = \"The rise of three true outcomes in baseball\",\n    caption = \"Data courtesy of Lahman\"\n  )\n\n\nEach mapped aesthetic can be labeled"
  },
  {
    "objectID": "lectures/02-graphics.html#custom-theme",
    "href": "lectures/02-graphics.html#custom-theme",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Custom theme",
    "text": "Custom theme\n\n\n\n\nyearly_batting |&gt; \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\") +\n  scale_color_gradient(low = \"darkblue\", high = \"gold\") +\n  labs(\n    x = \"Year\",\n    y = \"Homeruns\",\n    color = \"Strikeouts\",\n    size = \"Walks\",\n    title = \"The rise of three true outcomes in baseball\",\n    caption = \"Data courtesy of Lahman\"\n  ) +\n  theme_bw(base_size = 20) +\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5, \n                                  face = \"bold\"))\n\n\nFor more theme options, check out the ggthemes and hrbrthemes packages"
  },
  {
    "objectID": "lectures/02-graphics.html#a-lesson-about-data-visualization",
    "href": "lectures/02-graphics.html#a-lesson-about-data-visualization",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "A lesson about data visualization…",
    "text": "A lesson about data visualization…\n\nSo far we’ve plotted total home runs across the years, with point size representing total walks and point color representing total strikeouts\n\n\n\nSimpler is better. What can we do to improve and make the plot simpler?\n\n\n\n\nHow about creating three separate plots for home runs, strikeouts, and walks, with each mapped to the y-axis?\nBut how do we do this without repeating the same code?"
  },
  {
    "objectID": "lectures/02-graphics.html#pivoting",
    "href": "lectures/02-graphics.html#pivoting",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Pivoting",
    "text": "Pivoting\nRemember: data should be in tidy format\nWithin the tidyverse, the tidyr package offers functions for reshaping the data\n\npivot_longer: casts/gathers information spread out across variables\n\ntransforms data from wide format into long format\nincrease number of rows and decrease number of columns\n\npivot_wider: melts/spreads information out from observations\n\ntransforms data from long format into wide format\ndecrease number of rows and increase number of columns\n\n\n\n\nSome terminology\nPredecessors: reshape and reshape2"
  },
  {
    "objectID": "lectures/02-graphics.html#pivoting-1",
    "href": "lectures/02-graphics.html#pivoting-1",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Pivoting",
    "text": "Pivoting\n\nyearly_batting |&gt; \n  select(yearID, HRs = total_hr, Strikeouts = total_so, Walks = total_bb) |&gt; # renaming while also selecting\n  pivot_longer(HRs:Walks, # can also do !yearID (to select everything but yearID)\n               names_to = \"stat\",\n               values_to = \"val\")\n\n# A tibble: 444 × 3\n   yearID stat         val\n    &lt;int&gt; &lt;chr&gt;      &lt;int&gt;\n 1   1876 HRs           40\n 2   1876 Strikeouts   589\n 3   1876 Walks        336\n 4   1877 HRs           24\n 5   1877 Strikeouts   726\n 6   1877 Walks        345\n 7   1878 HRs           23\n 8   1878 Strikeouts  1081\n 9   1878 Walks        364\n10   1879 HRs           58\n# ℹ 434 more rows\n\n\nWe’ve pivoted the data and created the following variables\n\nstat, to represent the name of the batting statistics\nval, to represent the total value of each statistic in each year."
  },
  {
    "objectID": "lectures/02-graphics.html#faceting",
    "href": "lectures/02-graphics.html#faceting",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Faceting",
    "text": "Faceting\n\n\n\nyearly_batting |&gt;\n  select(yearID, HRs = total_hr, \n         Strikeouts = total_so, Walks = total_bb) |&gt;\n  pivot_longer(HRs:Walks, \n               names_to = \"stat\", \n               values_to = \"val\") |&gt;\n  ggplot(aes(yearID, val)) +\n  geom_line(color = \"darkblue\") +\n  geom_point(alpha = 0.8, color = \"darkblue\") +\n  facet_wrap(~ stat, scales = \"free_y\", ncol = 1) +\n  labs(\n    x = \"Year\", \n    y = \"Total of statistic\",\n    title = \"The rise of three true outcomes in baseball\",\n    caption = \"Data courtesy of Lahman\"\n  ) +\n  theme_bw(base_size = 20) +\n  theme(strip.background = element_blank(),\n        plot.title = element_text(hjust = 0.5, \n                                  face = \"bold\"))\n\n\nCreate a multi-panel plot faceted by a conditioning variable (in our case, stat)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese facet/panel plots are sometimes called trellis plots (or lattice plots)"
  },
  {
    "objectID": "lectures/02-graphics.html#exercise",
    "href": "lectures/02-graphics.html#exercise",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Exercise",
    "text": "Exercise\nThe babynames package contains a dataset (also) named babynames, which contains information on the number of children of each sex given each name from 1880 to 2017, provided by the United States Social Security Administration.\nHow does the popularity (in terms of frequency) of your own name (combination of name and sex) change over time? Also, stick a thick, red, vertical dashed line on the plot at your birth year (try geom_vline()).\nNext, pick two other names and compare their popularity over time with your own name.\n\n# install.packages(\"babynames\")\n# library(babynames)\n# babynames |&gt; \n#   INSERT CODE HERE"
  },
  {
    "objectID": "lectures/02-graphics.html#resources",
    "href": "lectures/02-graphics.html#resources",
    "title": "Data visualization: the grammar of graphics and ggplot2",
    "section": "Resources",
    "text": "Resources\n\nggplot2 website: cheatsheets, FAQs, extensions, and more\nTidyTuesday\nDavid Robinson’s TidyTuesday screencasts\nVizBuzz: LIVE data viz replication game show\n\nQuang on VizBuzz (will participate again this summer!)"
  },
  {
    "objectID": "sports.html",
    "href": "sports.html",
    "title": "Sports",
    "section": "",
    "text": "TBA"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SURE 2025",
    "section": "",
    "text": "Welcome to the Summer Undergraduate Research Experience in Statistics (SURE) 2025, hosted by the Department of Statistics & Data Science at Carnegie Mellon University. This program focuses on statistics and data science methodology with applications in healthcare and sports analytics.\nOn this site, the Lectures tab contains all lecture slides. The Health and Sports tabs contain materials for health and sports camps, respectively."
  },
  {
    "objectID": "lectures.html",
    "href": "lectures.html",
    "title": "Lectures",
    "section": "",
    "text": "Date\nTitle\nMaterials\n\n\n\n\nLecture 0\nJune 2\nWelcome to SURE 2024\n\n\n\nLecture 1\nJune 3\nExploring data: into the tidyverse\nslides\n\n\nLecture 2\nJune 4\nData visualization: the grammar of graphics and ggplot2\nslides"
  },
  {
    "objectID": "lectures.html#contents",
    "href": "lectures.html#contents",
    "title": "Lectures",
    "section": "",
    "text": "Date\nTitle\nMaterials\n\n\n\n\nLecture 0\nJune 2\nWelcome to SURE 2024\n\n\n\nLecture 1\nJune 3\nExploring data: into the tidyverse\nslides\n\n\nLecture 2\nJune 4\nData visualization: the grammar of graphics and ggplot2\nslides"
  },
  {
    "objectID": "r-setup.html#r-and-rstudio",
    "href": "r-setup.html#r-and-rstudio",
    "title": "R and RStudio Setup",
    "section": "R and RStudio",
    "text": "R and RStudio\nR is an open-source programming language for statistical computing. R is widely-used in both academia and industry, due to its capacity for statistical analysis and data science.\nIn order to use R effectively, you need a suitable editing environment, i.e. RStudio. For more context, RStudio is an integrated development environment (IDE) developed specifically for R programming. Although R can be run without RStudio, RStudio provides a more user-friendly experience with additional functionality.\nTo download R and RStudio, visit https://posit.co/download/rstudio-desktop.\nYou will see the following two tasks to be completed:\n\n1: Install R\n2: Install RStudio"
  },
  {
    "objectID": "r-setup.html#step-1-install-r",
    "href": "r-setup.html#step-1-install-r",
    "title": "R and RStudio Setup",
    "section": "Step 1: Install R",
    "text": "Step 1: Install R\n(Note that the following instructions apply to the latest R version (4.5.0) as of May 1, 2025)\nClick on DOWNLOAD AND INSTALL R. This will direct you to the CRAN (Comprehensive R Archive Network) website.\nmacOS\n\nClick on Download R for macOS.\nChoose the .pkg file suitable for your Mac (Apple silicon (M1,2,..) Macs or older Intel Macs.)\nOpen the .pkg file after the download is complete.\nFollow the installation instructions.\n\nWindows\n\nClick on Download R for Windows.\nClick on install R for the first time (on the same line as the base subdirectory.)\nChoose Download R-4.5.0 for Windows.\nOpen the .exe file after the download is complete.\nFollow the installation instructions."
  },
  {
    "objectID": "r-setup.html#step-2-install-rstudio",
    "href": "r-setup.html#step-2-install-rstudio",
    "title": "R and RStudio Setup",
    "section": "Step 2: Install RStudio",
    "text": "Step 2: Install RStudio\n\n\n\n\n\n\nImportant\n\n\n\nR must be installed before RStudio.\n\n\nClick on DOWNLOAD RSTUDIO DESKTOP… Your operating system is automatically detected. (If your OS is not correctly detected, scroll down and choose the right version for your system.)\nmacOS\n\nOpen the .dmg file after the download is complete.\nDrag and drop it to your Applications folder.\n\nWindows\n\nOpen the .exe file after the download is complete.\nFollow the installation instructions."
  },
  {
    "objectID": "r-setup.html#step3",
    "href": "r-setup.html#step3",
    "title": "R and RStudio Setup",
    "section": "Step 3: Check R and RStudio installations",
    "text": "Step 3: Check R and RStudio installations\nOpen RStudio and type in the following command in the Console pane.\n\nversion\n\nThis will print out the current version of R on your machine. The output should look similar to what shown below (the first 4 lines might be different, depending on your operating system.)\n\n\n               _                           \nplatform       aarch64-apple-darwin20      \narch           aarch64                     \nos             darwin20                    \nsystem         aarch64, darwin20           \nstatus                                     \nmajor          4                           \nminor          5.0                         \nyear           2025                        \nmonth          04                          \nday            11                          \nsvn rev        88135                       \nlanguage       R                           \nversion.string R version 4.5.0 (2025-04-11)\nnickname       How About a Twenty-Six"
  },
  {
    "objectID": "r-setup.html#step-4-install-an-r-package",
    "href": "r-setup.html#step-4-install-an-r-package",
    "title": "R and RStudio Setup",
    "section": "Step 4: Install an R package",
    "text": "Step 4: Install an R package\nIn R, a package is a collection of functions, data, and compiled code. In addition to a set of built-in base packages, there are numerous external R packages written by the community to add specific functionality.\nIn general, to install an R package, you can use the install.packages() function and pass in the package name.\nThe following example shows how to install the tidyverse package in R. The tidyverse is a suite of R packages we will be using throughout this program. It features popular packages such as ggplot2 for data visualization and dplyr for data manipulation.\nAfter installing R and RStudio, open RStudio and enter the following command in the Console pane.\n\ninstall.packages(\"tidyverse\")\n\nTo verify that tidyverse is successfully installed, run the following command:\n\nlibrary(tidyverse)\n\nYou should get a message similar to the output below.\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAsk us for help if you encounter any issues or errors in any of the installation steps above."
  },
  {
    "objectID": "r-setup.html#r-primers-on-posit-cloud",
    "href": "r-setup.html#r-primers-on-posit-cloud",
    "title": "R and RStudio Setup",
    "section": "R Primers on Posit Cloud",
    "text": "R Primers on Posit Cloud\nIn addition to following the steps above for installing R and RStudio on your computer, we recommend you make a free Posit Cloud (formerly RStudio Cloud) account at https://posit.cloud/. This is a free, browser-based version of R and RStudio that also provides access to a growing number of relevant R tutorials / primers.\nAfter you create a Posit Cloud account, navigate to the menu on the left and click on “Recipes”. This brings up a menu of tutorials, with code primers you can choose to work through. Please complete the tutorials listed under “R Basics” (you can skip the first three). Also, feel free to explore the other tutorials."
  },
  {
    "objectID": "git-setup.html#step-1-create-a-github-account",
    "href": "git-setup.html#step-1-create-a-github-account",
    "title": "Git and GitHub Setup",
    "section": "Step 1: Create a GitHub account",
    "text": "Step 1: Create a GitHub account\nRegister for a GitHub account at https://github.com if you do not have one. It is completely free to use. You may use any username you prefer; we will later ask for your username so we can keep track."
  },
  {
    "objectID": "git-setup.html#step-2-install-git",
    "href": "git-setup.html#step-2-install-git",
    "title": "Git and GitHub Setup",
    "section": "Step 2: Install Git",
    "text": "Step 2: Install Git\n(Windows)\n\nGo to https://git-scm.com/download/win\nNavigate to “Click here to download” on the first line and click on it\nFollow the installation instructions\n\n(macOS)\n\nOpen the Terminal app on your computer (Finder \\(\\rightarrow\\) Applications \\(\\rightarrow\\) Terminal)\nGo to https://brew.sh and copy/paste the chunk under “Install Homebrew” to the Terminal\nOnce Homebrew is installed, type this into the Terminal: brew install git"
  },
  {
    "objectID": "git-setup.html#step-3-configure-git",
    "href": "git-setup.html#step-3-configure-git",
    "title": "Git and GitHub Setup",
    "section": "Step 3: Configure Git",
    "text": "Step 3: Configure Git\n\nAfter installation, you need to configure Git. This can be done directly in R:\n\n\n# uncomment and run the following line to install the usethis package\n# install.packages(\"usethis\")\nusethis::use_git_config(user.name = \"Your Name\", user.email = \"your-github@email.address\")\n\n\nUse your full name for the user.name field and the same email as your GitHub account for user.email\nYou then need to create a personal access token for authentication as follows:\n\n\nusethis::create_github_token()\n\n\nThis will direct you to the GitHub site on your browser (you may have to log in). On this site:\n\nUnder “Note”, type in some description for this token (e.g., “SURE 2025 GitHub token”)\nFor “Expiration”, set an expiration date for this token (e.g., 90 days) or make it permanent (i.e. choose “No expiration” if you don’t want to deal with this again in the future)\nUnder “Select scopes”, recommended scopes will be pre-selected. Stick with these for now.\n\nNext, click on “Generate token”\nCopy the token to your clipboard (or leave the browser window open, so you can come back to copy the token later)\nIn RStudio, run the following to get a prompt where you can paste your token:\n\n\n# uncomment and run the following line to install the gitcreds package\n# install.packages(\"gitcreds\")\ngitcreds::gitcreds_set()\n\nYou should then be ready to use GitHub!"
  },
  {
    "objectID": "git-setup.html#step-4-create-a-github-repository",
    "href": "git-setup.html#step-4-create-a-github-repository",
    "title": "Git and GitHub Setup",
    "section": "Step 4: Create a GitHub repository",
    "text": "Step 4: Create a GitHub repository\nWe will follow the paradigm of “GitHub first”. What this means is that when we create a repository, we will create it on GitHub first, then link a local repository to it from inside RStudio.\nAfter you’ve logged in, to create a GitHub repository\n\nGo to https://github.com/new\nName the repository (give it a meaningful name)\nGive the repository a description (don’t leave this blank although this is optional)\nDecide whether to keep the repository public or private (for now, let’s just keep it public)\nClick on “Initialize this repository with a README”. For now, there’s no need to “Add .gitignore” or “Choose a license”\nClick on “Create Repository”"
  },
  {
    "objectID": "git-setup.html#step-5-connect-rstudio-to-the-github-repository",
    "href": "git-setup.html#step-5-connect-rstudio-to-the-github-repository",
    "title": "Git and GitHub Setup",
    "section": "Step 5: Connect RStudio to the GitHub repository",
    "text": "Step 5: Connect RStudio to the GitHub repository\n\nGo to the browser page for your GitHub repository\nClick on Code (in the same line as “Go to file”). Under HTTPS, copy the URL\nIn RStudio, click on File &gt; New Project.... Next, click on “Version Control” and then on “Git”. Paste the URL you just copied into “Repository URL”\nType the name for the folder on your computer associated with this repository into Project directory name\n\nYou can choose whatever name you want, but it is recommended to give a name similar to the repository name on GitHub\n\nMake sure “Create project as subdirectory of:” points to where you want to locate this new folder\nClick on “Create Project”\nAt this point, you should find that the “Files” pane (in the bottom right of RStudio) is listing the files in your local repository."
  },
  {
    "objectID": "git-setup.html#step-6-modify-the-repository",
    "href": "git-setup.html#step-6-modify-the-repository",
    "title": "Git and GitHub Setup",
    "section": "Step 6: Modify the repository",
    "text": "Step 6: Modify the repository\nTo add a new file from your local repository to GitHub:\n\nIn RStudio, open a new file (could be anything - e.g. R Script, Quarto document, etc.).\nFill the file with some code/comments/etc. (This is just for illustration purpose, to show how you can add a file to GitHub from your computer)\nSave the file. At this point, this file should show up in the “Git” pane (in the top right of RStudio)\nCheck the box under “Staged” in the Git pane to stage the file for a commit\nClick on “Commit” in the Git pane\nIn the new window that opens, add a “Commit message”, then click on the “Commit” button\nClick on “Push” to push your changes from your local repository to the remote repository on GitHub\n\nIf you encountered no errors then you’re done! While working on a single project you will repeatedly perform the tasks in Step 6: make changes to files, commit changes, then push changes\nEvery time you want to create a new repository, you can just start with Step 4, use GitHub, copy the repository into RStudio, then repeatedly update, commit, and push.\nAsk us for help if you have any questions."
  },
  {
    "objectID": "health.html",
    "href": "health.html",
    "title": "Health",
    "section": "",
    "text": "TBA"
  },
  {
    "objectID": "lectures/04-quantitative.html#quantitative-data",
    "href": "lectures/04-quantitative.html#quantitative-data",
    "title": "Data visualization: quantitative data",
    "section": "Quantitative data",
    "text": "Quantitative data\nTwo different versions of quantitative data:\nDiscrete: countable and has clear space between values (i.e. whole number only)\n\nExamples: number of goals scored in a game, number of children in a family\n\nContinuous: can take any value within some interval\n\nExamples: price of houses in Pittsburgh, water temperature, wind speed"
  },
  {
    "objectID": "lectures/04-quantitative.html#data",
    "href": "lectures/04-quantitative.html#data",
    "title": "Data visualization: quantitative data",
    "section": "Data",
    "text": "Data\nTaylor Swift songs via the taylor package (data dictionary here)\n\nlibrary(tidyverse)\ntheme_set(theme_light())\nlibrary(taylor)\nnames(taylor_all_songs)\n\n [1] \"album_name\"          \"ep\"                  \"album_release\"      \n [4] \"track_number\"        \"track_name\"          \"artist\"             \n [7] \"featuring\"           \"bonus_track\"         \"promotional_release\"\n[10] \"single_release\"      \"track_release\"       \"danceability\"       \n[13] \"energy\"              \"key\"                 \"loudness\"           \n[16] \"mode\"                \"speechiness\"         \"acousticness\"       \n[19] \"instrumentalness\"    \"liveness\"            \"valence\"            \n[22] \"tempo\"               \"time_signature\"      \"duration_ms\"        \n[25] \"explicit\"            \"key_name\"            \"mode_name\"          \n[28] \"key_mode\"            \"lyrics\"             \n\ntaylor_all_songs &lt;- taylor_all_songs |&gt; \n  mutate(duration = duration_ms / 60000)"
  },
  {
    "objectID": "lectures/04-quantitative.html#summarizing-1d-quantitative-data",
    "href": "lectures/04-quantitative.html#summarizing-1d-quantitative-data",
    "title": "Data visualization: quantitative data",
    "section": "Summarizing 1D quantitative data",
    "text": "Summarizing 1D quantitative data\n\nCenter: mean, median, number and location of modes\n\n\n\nSpread: range, variance, standard deviation, IQR, etc.\n\n\n\n\nShape: skew vs symmetry, outliers, heavy vs light tails, etc.\n\n\n\nCompute various statistics in R with summary(), mean(), median(), quantile(), range(), sd(), var(), etc.\n\n\nExample: Summarizing the duration of Taylor Swift songs\n\nsummary(taylor_all_songs$duration)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  2.198   3.543   3.930   3.985   4.343  10.217      12 \n\nsd(taylor_all_songs$duration, na.rm = TRUE)\n\n[1] 0.7527544"
  },
  {
    "objectID": "lectures/04-quantitative.html#boxplots-visualize-summary-statistics",
    "href": "lectures/04-quantitative.html#boxplots-visualize-summary-statistics",
    "title": "Data visualization: quantitative data",
    "section": "Boxplots visualize summary statistics",
    "text": "Boxplots visualize summary statistics\n\n\nPros:\n\nDisplays outliers, percentiles, spread, skew\nUseful for side-by-side comparison\n\nCons:\n\nDoes not display the full distribution shape\nDoes not display modes\n\nThe expert weighed in…\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration)) +\n  geom_boxplot() +\n  theme(axis.text.y = element_blank())"
  },
  {
    "objectID": "lectures/04-quantitative.html#histograms-display-1d-continuous-distributions",
    "href": "lectures/04-quantitative.html#histograms-display-1d-continuous-distributions",
    "title": "Data visualization: quantitative data",
    "section": "Histograms display 1D continuous distributions",
    "text": "Histograms display 1D continuous distributions\n\n\n\\(\\displaystyle \\text{# total obs.} = \\sum_{j=1}^k \\text{# obs. in bin }j\\)\nPros:\n\nDisplays full shape of distribution\nEasy to interpret\n\nCons:\n\nHave to choose number of bins and bin locations (will revisit later)\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration)) +\n  geom_histogram()"
  },
  {
    "objectID": "lectures/04-quantitative.html#display-the-data-points-directly-with-beeswarm-plots",
    "href": "lectures/04-quantitative.html#display-the-data-points-directly-with-beeswarm-plots",
    "title": "Data visualization: quantitative data",
    "section": "Display the data points directly with beeswarm plots",
    "text": "Display the data points directly with beeswarm plots\n\n\nPros:\n\nDisplays each data point\nEasy to view full shape of distribution\n\nCons:\n\nCan be overbearing with large datasets\nWhich algorithm for arranging points?\n\n\n\nlibrary(ggbeeswarm)\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration, y = \"\")) +\n  geom_beeswarm(cex = 2)"
  },
  {
    "objectID": "lectures/04-quantitative.html#smooth-summary-with-violin-plots",
    "href": "lectures/04-quantitative.html#smooth-summary-with-violin-plots",
    "title": "Data visualization: quantitative data",
    "section": "Smooth summary with violin plots",
    "text": "Smooth summary with violin plots\n\n\nPros:\n\nDisplays full shape of distribution\nCan easily layer…\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration, y = \"\")) +\n  geom_violin()"
  },
  {
    "objectID": "lectures/04-quantitative.html#smooth-summary-with-violin-plots-box-plots",
    "href": "lectures/04-quantitative.html#smooth-summary-with-violin-plots-box-plots",
    "title": "Data visualization: quantitative data",
    "section": "Smooth summary with violin plots + box plots",
    "text": "Smooth summary with violin plots + box plots\n\n\nPros:\n\nDisplays full shape of distribution\nCan easily layer… with box plots on top\n\nCons:\n\nSummary of data via density estimate\nMirror image is duplicate information\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration, y = \"\")) +\n  geom_violin() +\n  geom_boxplot(width = 0.4)"
  },
  {
    "objectID": "lectures/04-quantitative.html#what-do-visualizations-of-continuous-distributions-display",
    "href": "lectures/04-quantitative.html#what-do-visualizations-of-continuous-distributions-display",
    "title": "Data visualization: quantitative data",
    "section": "What do visualizations of continuous distributions display?",
    "text": "What do visualizations of continuous distributions display?\nProbability that continuous variable \\(X\\) takes a particular value is 0\ne.g. \\(P(\\) duration \\(= 3) = 0\\) (why?)\nFor continuous variables, the cumulative distribution function (CDF) is \\[F(x) = P(X \\leq x)\\]\nFor \\(n\\) observations, the empirical CDF (ECDF) can be computed based on the observed data \\[\\hat{F}_n(x)  = \\frac{\\text{# obs. with variable} \\leq x}{n} = \\frac{1}{n} \\sum_{i=1}^{n} I (x_i \\leq x)\\]\nwhere \\(I()\\) is the indicator function, i.e. ifelse(x_i &lt;= x, 1, 0)"
  },
  {
    "objectID": "lectures/04-quantitative.html#display-full-distribution-with-ecdf-plot",
    "href": "lectures/04-quantitative.html#display-full-distribution-with-ecdf-plot",
    "title": "Data visualization: quantitative data",
    "section": "Display full distribution with ECDF plot",
    "text": "Display full distribution with ECDF plot\n\n\nPros:\n\nDisplays all of your data at once\nAs \\(n \\rightarrow \\infty\\), the ECDF \\(\\hat F_n(x)\\) converges to the true CDF \\(F(x)\\)\n\nCons:\n\nWhat are the cons?\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration)) +\n  stat_ecdf()"
  },
  {
    "objectID": "lectures/04-quantitative.html#rug-plots-display-raw-data",
    "href": "lectures/04-quantitative.html#rug-plots-display-raw-data",
    "title": "Data visualization: quantitative data",
    "section": "Rug plots display raw data",
    "text": "Rug plots display raw data\n\n\nPros:\n\nDisplays raw data points\nUseful supplement for summaries and 2D plots\n\nCons:\n\nCan be overbearing for large datasets\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration)) +\n  geom_rug(alpha = 0.5)"
  },
  {
    "objectID": "lectures/04-quantitative.html#rug-plots-supplement-other-displays",
    "href": "lectures/04-quantitative.html#rug-plots-supplement-other-displays",
    "title": "Data visualization: quantitative data",
    "section": "Rug plots supplement other displays",
    "text": "Rug plots supplement other displays\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration)) +\n  geom_histogram() +\n  geom_rug(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = duration)) +\n  stat_ecdf() +\n  geom_rug(alpha = 0.5)"
  },
  {
    "objectID": "lectures/04-quantitative.html#summarizing-2d-quantitative-data",
    "href": "lectures/04-quantitative.html#summarizing-2d-quantitative-data",
    "title": "Data visualization: quantitative data",
    "section": "Summarizing 2D quantitative data",
    "text": "Summarizing 2D quantitative data\n\nDirection/trend (positive, negative)\nStrength of the relationship (strong, moderate, weak)\nLinearity (linear, non-linear)\n\n\nBig picture\n\nScatterplots are by far the most common visual\nRegression analysis is by far the most popular analysis (we will have a class on this)\nRelationships may vary across other variables, e.g., categorical variables"
  },
  {
    "objectID": "lectures/04-quantitative.html#making-scatterplots",
    "href": "lectures/04-quantitative.html#making-scatterplots",
    "title": "Data visualization: quantitative data",
    "section": "Making scatterplots",
    "text": "Making scatterplots\n\n\n\nUse geom_point()\nDisplaying the joint (bivariate) distribution\nWhat is the obvious flaw with this plot?\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4)"
  },
  {
    "objectID": "lectures/04-quantitative.html#making-scatterplots-always-adjust-the-transparency-alpha",
    "href": "lectures/04-quantitative.html#making-scatterplots-always-adjust-the-transparency-alpha",
    "title": "Data visualization: quantitative data",
    "section": "Making scatterplots: always adjust the transparency (alpha)",
    "text": "Making scatterplots: always adjust the transparency (alpha)\n\n\n\nAdjust the transparency of points via alpha to visualize overlap\nProvides better understanding of joint frequency\nEspecially important with larger datasets\nSee also: ggblend\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5)"
  },
  {
    "objectID": "lectures/04-quantitative.html#summarizing-2d-quantitative-data-1",
    "href": "lectures/04-quantitative.html#summarizing-2d-quantitative-data-1",
    "title": "Data visualization: quantitative data",
    "section": "Summarizing 2D quantitative data",
    "text": "Summarizing 2D quantitative data\n\n\n\nScatterplot\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nCorrelation coefficient\n\n\ncor(taylor_all_songs$loudness, \n    taylor_all_songs$energy, \n    use = \"complete.obs\")\n\n[1] 0.7910765\n\n\nNote: the default correlation you get from cor() is Pearson correlation coefficient\nOther correlations:\n\nSpearman’s correlation\nKendall rank correlation coefficient\nand more"
  },
  {
    "objectID": "lectures/04-quantitative.html#when-the-correlations-high",
    "href": "lectures/04-quantitative.html#when-the-correlations-high",
    "title": "Data visualization: quantitative data",
    "section": "When the correlation’s high…",
    "text": "When the correlation’s high…"
  },
  {
    "objectID": "lectures/04-quantitative.html#displaying-trend-line-linear-regression-a-preview",
    "href": "lectures/04-quantitative.html#displaying-trend-line-linear-regression-a-preview",
    "title": "Data visualization: quantitative data",
    "section": "Displaying trend line: linear regression (a preview)",
    "text": "Displaying trend line: linear regression (a preview)\n\n\n\nDisplay regression line for energy ~ loudness\n95% confidence intervals by default\nEstimating the conditional expectation of energy | loudness\n\ni.e., \\(\\mathbb{E}[\\) energy \\(\\mid\\) loudness \\(]\\)\n\n\n\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5) +\n  geom_smooth(method = \"lm\", linewidth = 2)"
  },
  {
    "objectID": "lectures/04-quantitative.html#summarizing-2d-quantitative-data-2",
    "href": "lectures/04-quantitative.html#summarizing-2d-quantitative-data-2",
    "title": "Data visualization: quantitative data",
    "section": "Summarizing 2D quantitative data",
    "text": "Summarizing 2D quantitative data\n\n\nAdd rug plots to supplement scatterplot\n\ntaylor_all_songs |&gt; \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5) +\n  geom_rug(alpha = 0.4)"
  },
  {
    "objectID": "lectures/04-quantitative.html#pairs-plot",
    "href": "lectures/04-quantitative.html#pairs-plot",
    "title": "Data visualization: quantitative data",
    "section": "Pairs plot",
    "text": "Pairs plot\n\nlibrary(GGally)\ntaylor_all_songs |&gt; \n  select(danceability, energy, loudness, tempo) |&gt; \n  ggpairs()"
  },
  {
    "objectID": "lectures/04-quantitative.html#continuous-by-categorical-side-by-side-plots",
    "href": "lectures/04-quantitative.html#continuous-by-categorical-side-by-side-plots",
    "title": "Data visualization: quantitative data",
    "section": "Continuous by categorical: side by side plots",
    "text": "Continuous by categorical: side by side plots\n\ntaylor_all_songs |&gt; \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |&gt;\n  ggplot(aes(x = duration, y = album_name)) +\n  geom_violin() +\n  geom_boxplot(width = 0.4)"
  },
  {
    "objectID": "lectures/04-quantitative.html#continuous-by-categorical-color",
    "href": "lectures/04-quantitative.html#continuous-by-categorical-color",
    "title": "Data visualization: quantitative data",
    "section": "Continuous by categorical: color",
    "text": "Continuous by categorical: color\n\ntaylor_all_songs |&gt; \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |&gt;\n  ggplot(aes(x = duration, color = album_name)) +\n  stat_ecdf(linewidth = 1) +\n  scale_color_albums() + # from the taylor package \n  theme(legend.position = \"bottom\")"
  },
  {
    "objectID": "lectures/04-quantitative.html#continuous-by-categorical-ridgeline-plot-joyplot",
    "href": "lectures/04-quantitative.html#continuous-by-categorical-ridgeline-plot-joyplot",
    "title": "Data visualization: quantitative data",
    "section": "Continuous by categorical: ridgeline plot (joyplot)",
    "text": "Continuous by categorical: ridgeline plot (joyplot)\nFor more, see this tutorial\n\nlibrary(ggridges)\ntaylor_all_songs |&gt; \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |&gt;\n  ggplot(aes(x = duration, y = album_name)) +\n  geom_density_ridges(scale = 1)"
  },
  {
    "objectID": "lectures/04-quantitative.html#what-about-for-histograms",
    "href": "lectures/04-quantitative.html#what-about-for-histograms",
    "title": "Data visualization: quantitative data",
    "section": "What about for histograms?",
    "text": "What about for histograms?\n\ntaylor_all_songs |&gt; \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |&gt;\n  ggplot(aes(x = duration, fill = album_name)) +\n  geom_histogram(alpha = 0.6, bins = 15) +\n  scale_fill_albums()"
  },
  {
    "objectID": "lectures/04-quantitative.html#what-about-facets",
    "href": "lectures/04-quantitative.html#what-about-facets",
    "title": "Data visualization: quantitative data",
    "section": "What about facets?",
    "text": "What about facets?\nDifference between facet_wrap and facet_grid\n\ntaylor_all_songs |&gt; \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |&gt;\n  ggplot(aes(x = duration)) +\n  geom_histogram(bins = 15) +\n  facet_wrap(~ album_name, nrow = 1)"
  },
  {
    "objectID": "lectures/04-quantitative.html#what-about-facets-1",
    "href": "lectures/04-quantitative.html#what-about-facets-1",
    "title": "Data visualization: quantitative data",
    "section": "What about facets?",
    "text": "What about facets?\n\ntaylor_all_songs |&gt; \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |&gt;\n  ggplot(aes(x = duration)) +\n  geom_histogram(bins = 15) +\n  facet_grid(album_name ~ ., margins = TRUE)"
  },
  {
    "objectID": "lectures/03-categorical.html#data",
    "href": "lectures/03-categorical.html#data",
    "title": "Data visualization: categorical data",
    "section": "Data",
    "text": "Data\n\nFlying ettiquette survey\nPublicly available on GitHub and also via the ggmosaic package (the dataset is called fly).\nWhat does each row represent here?\n\n\nlibrary(tidyverse)\ntheme_set(theme_light()) # setting the ggplot theme\nlibrary(ggmosaic) # make sure to install it first\nflying_etiquette &lt;- fly |&gt; \n  filter(!is.na(do_you_recline), !is.na(rude_to_recline))\nnames(flying_etiquette)\n\n [1] \"id\"                             \"flight_freq\"                   \n [3] \"do_you_recline\"                 \"height\"                        \n [5] \"has_child_under_18\"             \"three_seats_two_arms\"          \n [7] \"two_seats_one_arm\"              \"window_shade\"                  \n [9] \"rude_to_move_to_unsold_seat\"    \"rude_to_talk_to_neighbor\"      \n[11] \"six_hr_flight_leave_seat\"       \"reclining_obligation_to_behind\"\n[13] \"rude_to_recline\"                \"eliminate_reclining\"           \n[15] \"rude_to_switch_seats_friends\"   \"rude_to_switch_seats_family\"   \n[17] \"rude_to_wake_neighbor_bathroom\" \"rude_to_wake_neighbor_walk\"    \n[19] \"rude_to_bring_baby\"             \"rude_to_bring_unruly_child\"    \n[21] \"use_electronics_takeoff\"        \"smoked_inflight\"               \n[23] \"gender\"                         \"age\"                           \n[25] \"household_income\"               \"education\"                     \n[27] \"region\""
  },
  {
    "objectID": "lectures/03-categorical.html#categorical-data",
    "href": "lectures/03-categorical.html#categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Categorical data",
    "text": "Categorical data\nTwo different versions of categorical data:\nNominal: categorical variables having unordered scales\n\nExamples: race, gender, species, etc,\n\nOrdinal: ordered categories; levels with a meaningful order\n\nExamples: education level, grades, ranks"
  },
  {
    "objectID": "lectures/03-categorical.html#factors-in-r",
    "href": "lectures/03-categorical.html#factors-in-r",
    "title": "Data visualization: categorical data",
    "section": "Factors in R",
    "text": "Factors in R\n\nIn R, factors are used to work with categorical variables\nR treats factors as ordinal - defaults to alphabetical\n\nMay need to manually define the factor levels (e.g., the reference level)\n\nSee the forcats package (automatically loaded with tidyverse)\n\n\nclass(flying_etiquette$do_you_recline)\n\n[1] \"factor\"\n\nlevels(flying_etiquette$do_you_recline)\n\n[1] \"never\"               \"once in a while\"     \"about half the time\"\n[4] \"usually\"             \"always\""
  },
  {
    "objectID": "lectures/03-categorical.html#summarizing-1d-categorical-data",
    "href": "lectures/03-categorical.html#summarizing-1d-categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Summarizing 1D categorical data",
    "text": "Summarizing 1D categorical data\nHow often do these respondents recline?\nFrequency tables (counts)\n\ntable(flying_etiquette$do_you_recline)\n\n\n              never     once in a while about half the time             usually \n                170                 256                 117                 175 \n             always \n                136 \n\n# flying_etiquette |&gt; \n#   group_by(do_you_recline) |&gt;\n#   summarize(n = n(), .groups = \"drop\")\n\nflying_etiquette |&gt; \n  count(do_you_recline)\n\n# A tibble: 5 × 2\n  do_you_recline          n\n  &lt;fct&gt;               &lt;int&gt;\n1 never                 170\n2 once in a while       256\n3 about half the time   117\n4 usually               175\n5 always                136"
  },
  {
    "objectID": "lectures/03-categorical.html#summarizing-1d-categorical-data-1",
    "href": "lectures/03-categorical.html#summarizing-1d-categorical-data-1",
    "title": "Data visualization: categorical data",
    "section": "Summarizing 1D categorical data",
    "text": "Summarizing 1D categorical data\nProportion table\n\nprop.table(table(flying_etiquette$do_you_recline))\n\n\n              never     once in a while about half the time             usually \n          0.1990632           0.2997658           0.1370023           0.2049180 \n             always \n          0.1592506 \n\nflying_etiquette |&gt; \n  count(do_you_recline) |&gt; \n  mutate(prop = n / sum(n))\n\n# A tibble: 5 × 3\n  do_you_recline          n  prop\n  &lt;fct&gt;               &lt;int&gt; &lt;dbl&gt;\n1 never                 170 0.199\n2 once in a while       256 0.300\n3 about half the time   117 0.137\n4 usually               175 0.205\n5 always                136 0.159"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-1d-categorical-data",
    "href": "lectures/03-categorical.html#visualizing-1d-categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Visualizing 1D categorical data",
    "text": "Visualizing 1D categorical data\n\n\nCreate a bar chart with geom_bar()\n\nMap do_you_recline to the x-axis\nCounts of each category are displayed on the y-axis\n\n\nflying_etiquette |&gt; \n  ggplot(aes(x = do_you_recline)) +\n  geom_bar()"
  },
  {
    "objectID": "lectures/03-categorical.html#behind-the-scenes-of-geom_bar",
    "href": "lectures/03-categorical.html#behind-the-scenes-of-geom_bar",
    "title": "Data visualization: categorical data",
    "section": "Behind the scenes of geom_bar()",
    "text": "Behind the scenes of geom_bar()\n\nstart with the data\naggregate and count the number of observations in each bar\nmap to plot aesthetics"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-1d-categorical-data-1",
    "href": "lectures/03-categorical.html#visualizing-1d-categorical-data-1",
    "title": "Data visualization: categorical data",
    "section": "Visualizing 1D categorical data",
    "text": "Visualizing 1D categorical data\n\n\nInstead of geom_bar(), do this “by hand” (Quang prefers this way)\n\naggregate and obtain the counts first with count() or (group_by and summarize())\nthen use geom_col()\n\n\nflying_etiquette |&gt;\n  count(do_you_recline, name = \"count\") |&gt; \n  ggplot(aes(x = do_you_recline, y = count)) +\n  geom_col()"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-1d-categorical-data-2",
    "href": "lectures/03-categorical.html#visualizing-1d-categorical-data-2",
    "title": "Data visualization: categorical data",
    "section": "Visualizing 1D categorical data",
    "text": "Visualizing 1D categorical data\n\n\nFlip your bar chart axes!\nJust simply replace x with y (Quang prefers this way)\n\nflying_etiquette |&gt;\n  ggplot(aes(y = do_you_recline)) +\n  geom_bar()\n\nOr use coord_flip()\n\nflying_etiquette |&gt; \n  ggplot(aes(x = do_you_recline)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "lectures/03-categorical.html#what-does-a-bar-chart-show",
    "href": "lectures/03-categorical.html#what-does-a-bar-chart-show",
    "title": "Data visualization: categorical data",
    "section": "What does a bar chart show?",
    "text": "What does a bar chart show?\n\n\nMarginal distribution: probability that a categorical variable \\(X\\) (e.g., do_you_recline) takes each particular category value \\(x\\) (always, usually, …, never)\n\nFrequency bar charts (earlier version) give info about sample size, but this could be labeled in the chart (use geom_text() or geom_label())\nNow, we create a proportion/percent bar chart to display the individual probabilities\nThis shows the probability mass function (PMF) for discrete variables\n\n(e.g. \\(P(\\) do_you_recline \\(=\\) never\\()\\))\n\n\n\n\nflying_etiquette |&gt; \n  count(do_you_recline) |&gt; \n  mutate(prop = n / sum(n)) |&gt; \n  ggplot(aes(x = prop, y = do_you_recline)) +\n  geom_col()   # + geom_label(aes(label = n), hjust = 1)"
  },
  {
    "objectID": "lectures/03-categorical.html#population-vs-sample",
    "href": "lectures/03-categorical.html#population-vs-sample",
    "title": "Data visualization: categorical data",
    "section": "Population vs sample",
    "text": "Population vs sample\nPopulation: The collection of all subjects of interest\nSample: A representative subset of the population of interest\n\nThe survey respondents is just a subset of all airplane flyers\n\n\nEmpirical distribution: estimating the true marginal distribution with observed (sample) data\n\n\n\nEstimate \\(P(\\) do_you_recline = \\(C_j\\)) with \\(\\hat p_j\\) for each category \\(C_j\\) (e.g., \\(\\hat p_\\texttt{always}\\), …, \\(\\hat p_\\texttt{never}\\))\n\nStandard error for each \\(\\hat p_j\\): \\(\\quad \\displaystyle \\text{SE}(\\hat{p}_j) = \\sqrt{\\frac{\\hat{p}_j (1 - \\hat{p}_j)}{n}}\\)"
  },
  {
    "objectID": "lectures/03-categorical.html#adding-confidence-intervals-to-bar-chart",
    "href": "lectures/03-categorical.html#adding-confidence-intervals-to-bar-chart",
    "title": "Data visualization: categorical data",
    "section": "Adding confidence intervals to bar chart",
    "text": "Adding confidence intervals to bar chart\n\n\n\n\nflying_etiquette |&gt; \n  count(do_you_recline) |&gt; \n  mutate(prop = n / sum(n),\n         se = sqrt(prop * (1 - prop) / sum(n)),\n         lower = prop - 2 * se,\n         upper = prop + 2 * se) |&gt; \n  ggplot(aes(x = prop, y = do_you_recline)) +\n  geom_col() +\n  geom_errorbar(aes(xmin = lower, xmax = upper), \n                color = \"blue\", \n                width = 0.2, \n                linewidth = 1)"
  },
  {
    "objectID": "lectures/03-categorical.html#ordering-factors-in-a-bar-chart",
    "href": "lectures/03-categorical.html#ordering-factors-in-a-bar-chart",
    "title": "Data visualization: categorical data",
    "section": "Ordering factors in a bar chart",
    "text": "Ordering factors in a bar chart\n\n\nOrder the bars by proportion\n(Let’s also flip the axes)\n\nflying_etiquette |&gt; \n  count(do_you_recline) |&gt; \n  mutate(\n    prop = n / sum(n),\n    se = sqrt(prop * (1 - prop) / sum(n)),\n    lower = prop - 2 * se,\n    upper = prop + 2 * se,\n    do_you_recline = fct_reorder(do_you_recline, prop)\n  ) |&gt; \n  ggplot(aes(x = prop, y = do_you_recline)) +\n  geom_col() +\n  geom_errorbar(aes(xmin = lower, xmax = upper), \n                color = \"blue\", \n                width = 0.2, \n                linewidth = 1)"
  },
  {
    "objectID": "lectures/03-categorical.html#pie-charts-dont-make-them",
    "href": "lectures/03-categorical.html#pie-charts-dont-make-them",
    "title": "Data visualization: categorical data",
    "section": "Pie charts… don’t make them",
    "text": "Pie charts… don’t make them\nWhy?\n\nhttps://www.data-to-viz.com/caveat/pie.html\nhttps://github.com/cxli233/FriendsDontLetFriends\n\n3D pie charts?… even worse"
  },
  {
    "objectID": "lectures/03-categorical.html#inference-for-1d-categorical-data",
    "href": "lectures/03-categorical.html#inference-for-1d-categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Inference for 1D categorical data",
    "text": "Inference for 1D categorical data\nChi-square test for 1D categorical data\n\nNull hypothesis: \\(H_0\\): \\(p_1 = p_2 = \\cdots = p_K\\)\nTest statistic: \\(\\displaystyle \\chi^2 = \\sum_{j=1}^K \\frac{(O_j - E_j)^2}{E_j}\\), where\n\n\\(O_j\\): observed counts in category \\(j\\)\n\\(E_j\\) : expected counts under the null (i.e., \\(n/K\\) or each category is equally likely to occur)\n\n\n\nchisq.test(table(flying_etiquette$do_you_recline))\n\n\n    Chi-squared test for given probabilities\n\ndata:  table(flying_etiquette$do_you_recline)\nX-squared = 66.644, df = 4, p-value = 1.159e-13"
  },
  {
    "objectID": "lectures/03-categorical.html#hypothesis-testing-in-general",
    "href": "lectures/03-categorical.html#hypothesis-testing-in-general",
    "title": "Data visualization: categorical data",
    "section": "Hypothesis testing in general",
    "text": "Hypothesis testing in general\nComputing \\(p\\)-values works like this:\n\nChoose a test statistic\nCompute the test statistic using the data\nIs test statistic “unusual” compared to what we would expect under the null?\nCompare \\(p\\)-value to the target error rate (“significance level”) \\(\\alpha\\)\n\nTypically choose \\(\\alpha = 0.05\\) (the origins of 0.05)"
  },
  {
    "objectID": "lectures/03-categorical.html#summarizing-2d-categorical-data",
    "href": "lectures/03-categorical.html#summarizing-2d-categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Summarizing 2D categorical data",
    "text": "Summarizing 2D categorical data\nContinuing with the flying etiquette survey data, let’s look at the responses to 2 questions\n\ndo_you_recline (Do you ever recline your seat when you fly?)\nrude_to_recline (Is it rude to recline your seat on a plane?)\n\nHow many levels does each variable have?\n\ntable(flying_etiquette$do_you_recline)\n\n\n              never     once in a while about half the time             usually \n                170                 256                 117                 175 \n             always \n                136 \n\ntable(flying_etiquette$rude_to_recline)\n\n\n      no somewhat      yes \n     502      281       71"
  },
  {
    "objectID": "lectures/03-categorical.html#summarizing-2d-categorical-data-1",
    "href": "lectures/03-categorical.html#summarizing-2d-categorical-data-1",
    "title": "Data visualization: categorical data",
    "section": "Summarizing 2D categorical data",
    "text": "Summarizing 2D categorical data\nTwo-way table (or contingency table, cross tabulation, crosstab)\n\ntable(\"Recline?\" = flying_etiquette$do_you_recline, \n      \"Rude to reline?\" = flying_etiquette$rude_to_recline)\n\n                     Rude to reline?\nRecline?               no somewhat yes\n  never                35       81  54\n  once in a while     116      129  11\n  about half the time  82       35   0\n  usually             145       27   3\n  always              124        9   3\n\nxtabs(~ do_you_recline + rude_to_recline, data = flying_etiquette)\n\n                     rude_to_recline\ndo_you_recline         no somewhat yes\n  never                35       81  54\n  once in a while     116      129  11\n  about half the time  82       35   0\n  usually             145       27   3\n  always              124        9   3"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-2d-categorical-data",
    "href": "lectures/03-categorical.html#visualizing-2d-categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Visualizing 2D categorical data",
    "text": "Visualizing 2D categorical data\n\n\nStacked bar chart: a bar chart of spine charts\nEmphasizes the marginal distribution of each category of x variable\n\ne.g., \\(P(\\) rude_to_recline \\(=\\) somewhat \\()\\)\n\nSimilar to 1D bar charts, start with counting every combination of 2 variables (using count() or group_by() and summarize()), then plot with geom_col()\n\n# flying_etiquette |&gt;\n#   ggplot(aes(x = rude_to_recline,\n#              fill = do_you_recline)) +\n#   geom_bar()\nflying_etiquette |&gt;\n  count(rude_to_recline, do_you_recline) |&gt;\n  ggplot(aes(x = rude_to_recline, y = n, \n             # filled by the other categorical variable\n             fill = do_you_recline)) + \n  geom_col()"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-2d-categorical-data-1",
    "href": "lectures/03-categorical.html#visualizing-2d-categorical-data-1",
    "title": "Data visualization: categorical data",
    "section": "Visualizing 2D categorical data",
    "text": "Visualizing 2D categorical data\n\n\nStacked bar chart (proportion version)\n\nflying_etiquette |&gt;\n  count(rude_to_recline, do_you_recline) |&gt;\n  ggplot(aes(x = rude_to_recline, y = n, \n             fill = do_you_recline)) +\n  geom_col(position = \"fill\")"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-2d-categorical-data-2",
    "href": "lectures/03-categorical.html#visualizing-2d-categorical-data-2",
    "title": "Data visualization: categorical data",
    "section": "Visualizing 2D categorical data",
    "text": "Visualizing 2D categorical data\n\n\nSide-by-side (grouped, dodged) bar chart: a bar chart of bar charts\nShows the conditional distribution of fill variable given x variable\n\ne.g., \\(P(\\) do_you_recline \\(=\\) always \\(\\mid\\) rude_to_recline \\(=\\) somewhat \\()\\)\n\n\nflying_etiquette |&gt;\n  count(rude_to_recline, do_you_recline) |&gt;\n  ggplot(aes(x = rude_to_recline, y = n, \n             fill = do_you_recline)) + \n  geom_col(position = \"dodge\")"
  },
  {
    "objectID": "lectures/03-categorical.html#joint-marginal-and-conditional-probabilities",
    "href": "lectures/03-categorical.html#joint-marginal-and-conditional-probabilities",
    "title": "Data visualization: categorical data",
    "section": "Joint, marginal, and conditional probabilities",
    "text": "Joint, marginal, and conditional probabilities\n\n\nLet \\(X\\) = rude_to_recline and \\(Y\\) = do_you_recline\n\nJoint distribution: frequency of the intersection\n\ne.g., \\(P(X =\\) somewhat \\(, Y =\\) always \\()\\)\n\nMarginal distribution: row sums or column sums\n\ne.g., \\(P(X =\\) somewhat \\()\\), \\(P(Y =\\) always \\()\\)\n\nConditional distribution: probability event \\(X\\) given event \\(Y\\)\n\ne.g., \\(P(X =\\) somewhat \\(\\mid Y =\\) always \\()\\)\n\n\\(\\displaystyle \\qquad \\quad = \\frac{P(X = \\texttt{somewhat}, Y = \\texttt{always})}{P(Y = \\texttt{always})}\\)\n\n\n\nflying_etiquette |&gt; \n  select(do_you_recline, rude_to_recline) |&gt; \n  table()\n\n                     rude_to_recline\ndo_you_recline         no somewhat yes\n  never                35       81  54\n  once in a while     116      129  11\n  about half the time  82       35   0\n  usually             145       27   3\n  always              124        9   3\n\nflying_etiquette |&gt; \n  select(do_you_recline, rude_to_recline) |&gt; \n  table() |&gt; \n  prop.table()\n\n                     rude_to_recline\ndo_you_recline                 no    somewhat         yes\n  never               0.040983607 0.094847775 0.063231850\n  once in a while     0.135831382 0.151053864 0.012880562\n  about half the time 0.096018735 0.040983607 0.000000000\n  usually             0.169789227 0.031615925 0.003512881\n  always              0.145199063 0.010538642 0.003512881"
  },
  {
    "objectID": "lectures/03-categorical.html#joint-marginal-and-conditional-probabilities-1",
    "href": "lectures/03-categorical.html#joint-marginal-and-conditional-probabilities-1",
    "title": "Data visualization: categorical data",
    "section": "Joint, marginal, and conditional probabilities",
    "text": "Joint, marginal, and conditional probabilities\nTwo-way proportion table (the tidyverse way) with pivot_wider\n\nflying_etiquette |&gt;\n  group_by(rude_to_recline, do_you_recline) |&gt;\n  summarize(joint = n() / nrow(flying_etiquette)) |&gt;\n  pivot_wider(names_from = rude_to_recline, values_from = joint, values_fill = 0)\n\n# A tibble: 5 × 4\n  do_you_recline          no somewhat     yes\n  &lt;fct&gt;                &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;\n1 never               0.0410   0.0948 0.0632 \n2 once in a while     0.136    0.151  0.0129 \n3 about half the time 0.0960   0.0410 0      \n4 usually             0.170    0.0316 0.00351\n5 always              0.145    0.0105 0.00351"
  },
  {
    "objectID": "lectures/03-categorical.html#categorical-heatmaps",
    "href": "lectures/03-categorical.html#categorical-heatmaps",
    "title": "Data visualization: categorical data",
    "section": "Categorical heatmaps",
    "text": "Categorical heatmaps\n\n\n\nUse geom_tile to display joint distribution of two categorical variables\nAnnotate tiles with labels of percentages using geom_text() and the scales package (a very neat package)\n\n\nflying_etiquette |&gt;\n  group_by(rude_to_recline, do_you_recline) |&gt;\n  summarize(\n    freq = n(), \n    joint = n() / nrow(flying_etiquette)\n  ) |&gt; \n  ggplot(aes(x = rude_to_recline, y = do_you_recline)) +\n  geom_tile(aes(fill = freq), color = \"white\") +\n  geom_text(aes(label = scales::percent(joint))) +\n  scale_fill_gradient2()"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-independence",
    "href": "lectures/03-categorical.html#visualizing-independence",
    "title": "Data visualization: categorical data",
    "section": "Visualizing independence",
    "text": "Visualizing independence\n\n\nMosaic plot\n\nspine chart of spine charts\nwidth: marginal distribution of rude_to_recline\nheight: conditional distribution of do_you_recline | rude_to_recline\narea: joint distribution\n\nUsing a mosaic plot to visually check for independence:\n\ncheck whether all proportions are the same (the boxes line up in a grid)\n\n\n\nflying_etiquette |&gt; \n  select(rude_to_recline, do_you_recline) |&gt; \n  table() |&gt; \n  mosaicplot(main = \"Relationship between reclining frequency and opinion on rudeness\")"
  },
  {
    "objectID": "lectures/03-categorical.html#visualizing-independence-1",
    "href": "lectures/03-categorical.html#visualizing-independence-1",
    "title": "Data visualization: categorical data",
    "section": "Visualizing independence",
    "text": "Visualizing independence\nMosaic plot with ggmosaic package\n\nflying_etiquette |&gt; \n  ggplot() +\n  geom_mosaic(aes(x = product(do_you_recline, rude_to_recline), fill = do_you_recline))"
  },
  {
    "objectID": "lectures/03-categorical.html#inference-for-2d-categorical-data",
    "href": "lectures/03-categorical.html#inference-for-2d-categorical-data",
    "title": "Data visualization: categorical data",
    "section": "Inference for 2D categorical data",
    "text": "Inference for 2D categorical data\nChi-square test for 2D categorical data\n\nNull hypothesis: \\(H_0\\): 2 categorical variables are independent of each other\n\ne.g., no association between do_you_recline and rude_to_recline\n\nTest statistic: \\(\\displaystyle \\chi^2 = \\sum_i^{k_1} \\sum_j^{k_2} \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\)\n\n\n# chisq.test(table(flying_etiquette$rude_to_recline, flying_etiquette$do_you_recline))\nflying_etiquette |&gt; \n  select(rude_to_recline, do_you_recline) |&gt; \n  table() |&gt; \n  chisq.test()\n\n\n    Pearson's Chi-squared test\n\ndata:  table(select(flying_etiquette, rude_to_recline, do_you_recline))\nX-squared = 316.73, df = 8, p-value &lt; 2.2e-16"
  },
  {
    "objectID": "lectures/03-categorical.html#residuals",
    "href": "lectures/03-categorical.html#residuals",
    "title": "Data visualization: categorical data",
    "section": "Residuals",
    "text": "Residuals\nRecall the test statistic: \\(\\displaystyle \\chi^2 = \\sum_i^{k_1} \\sum_j^{k_2} \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\)\nDefine the Pearson residuals: \\(\\displaystyle r_{ij} = \\frac{O_{ij} - E_{ij}}{\\sqrt{E_{ij}}}\\)\nSome rules of thumb:\n\n\\(r_{ij} \\approx 0\\): observed counts are close to expected counts\n\\(|r_{ij}| &gt; 2\\): significant at \\(\\alpha = 0.05\\)\nvery positive \\(r_{ij}\\): higher than expected\nvery negative \\(r_{ij}\\): lower than expected"
  },
  {
    "objectID": "lectures/03-categorical.html#residuals-1",
    "href": "lectures/03-categorical.html#residuals-1",
    "title": "Data visualization: categorical data",
    "section": "Residuals",
    "text": "Residuals\nMosaic plots with boxes color-coded by Pearson residuals\nTells us which combinations of 2 categorical variables (cells) are much higher/lower than expected\n\nflying_etiquette |&gt; \n  select(rude_to_recline, do_you_recline) |&gt; \n  table() |&gt; \n  mosaicplot(main = \"Relationship between reclining frequency and opinion on rudeness\", shade = TRUE)"
  },
  {
    "objectID": "lectures/03-categorical.html#beyond-2d-facets",
    "href": "lectures/03-categorical.html#beyond-2d-facets",
    "title": "Data visualization: categorical data",
    "section": "Beyond 2D: facets!",
    "text": "Beyond 2D: facets!\n\nflying_etiquette %&gt;%\n  ggplot(aes(x = rude_to_recline, fill = do_you_recline)) + \n  geom_bar() +\n  facet_wrap(~ flight_freq)"
  },
  {
    "objectID": "lectures/03-categorical.html#the-janitor-package",
    "href": "lectures/03-categorical.html#the-janitor-package",
    "title": "Data visualization: categorical data",
    "section": "The janitor package",
    "text": "The janitor package\nThe most popular janitor function is clean_names()… for cleaning column names\n\n# before\niris |&gt; \n  head()\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n# after\nlibrary(janitor)\niris |&gt; \n  clean_names() |&gt; \n  head()\n\n  sepal_length sepal_width petal_length petal_width species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa"
  },
  {
    "objectID": "lectures/03-categorical.html#tabulation-with-the-janitor-package",
    "href": "lectures/03-categorical.html#tabulation-with-the-janitor-package",
    "title": "Data visualization: categorical data",
    "section": "Tabulation with the janitor package",
    "text": "Tabulation with the janitor package\nThe lesser-known stars of janitor: functions for tabulation of categorical data\n\n\ntabyl\n\nflying_etiquette |&gt; \n  tabyl(do_you_recline)\n\n      do_you_recline   n   percent\n               never 170 0.1990632\n     once in a while 256 0.2997658\n about half the time 117 0.1370023\n             usually 175 0.2049180\n              always 136 0.1592506\n\n\n\nadorn_*() functions\n\nflying_etiquette |&gt; \n  tabyl(do_you_recline, rude_to_recline) |&gt; \n  adorn_percentages(\"row\") |&gt; \n  adorn_pct_formatting(digits = 2) |&gt; \n  adorn_ns()\n\n      do_you_recline           no     somewhat         yes\n               never 20.59%  (35) 47.65%  (81) 31.76% (54)\n     once in a while 45.31% (116) 50.39% (129)  4.30% (11)\n about half the time 70.09%  (82) 29.91%  (35)  0.00%  (0)\n             usually 82.86% (145) 15.43%  (27)  1.71%  (3)\n              always 91.18% (124)  6.62%   (9)  2.21%  (3)\n\n\n\nFor more, see this overview and this tutorial"
  }
]