{
  "hash": "7b6564e1c849b5186b005f1a85914abf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Git and GitHub Setup\"\n---\n\n\n\n\n---\n\n\n\n\n\n\n\n\n\n## Step 1: Create a GitHub account\n\nRegister for a [GitHub](https://github.com/) account at [https://github.com](https://github.com/) if you do not have one. It is completely free to use. You may use any username you prefer; we will later ask for your username so we can keep track.\n\n## Step 2: Install Git\n\n(Windows) \n\n*   Go to [`https://git-scm.com/download/win`](https://git-scm.com/download/win)\n*   Navigate to \"Click here to download\" on the first line and click on it\n*   Follow the installation instructions\n\n(macOS)\n\n*   Open the Terminal app on your computer (Finder $\\rightarrow$ Applications $\\rightarrow$ Terminal)\n*   Go to [`https://brew.sh`](https://brew.sh) and copy/paste the chunk under \"Install Homebrew\" to the Terminal\n*   Once Homebrew is installed, type this into the Terminal:  `brew install git`\n\n## Step 3: Configure Git\n\n* After installation, you need to configure Git. This can be done directly in `R`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# uncomment and run the following line to install the usethis package\n# install.packages(\"usethis\")\nusethis::use_git_config(user.name = \"Your Name\", user.email = \"your-github@email.address\")\n```\n:::\n\n\n\n\n* Use your full name for the `user.name` field and the same email as your GitHub account for `user.email`\n\n* You then need to create a *personal access token* for authentication as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n\n\n* This will direct you to the GitHub site on your browser (you may have to log in). On this site:\n\n  *   Under \"Note\", type in some description for this token (e.g., \"SURE 2024 GitHub token\")\n  *   For \"Expiration\", set an expiration date for this token (e.g., 90 days) or make it permanent (i.e. choose \"No expiration\" if you don't want to deal with this again in the future)\n  *   Under \"Select scopes\", recommended scopes will be pre-selected. Stick with these for now.\n\n* Next, click on \"Generate token\"\n\n* Copy the token to your clipboard (or leave the browser window open, so you can come back to copy the token later)\n\n* In RStudio, run the following to get a prompt where you can paste your token:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# uncomment and run the following line to install the gitcreds package\n# install.packages(\"gitcreds\")\ngitcreds::gitcreds_set()\n```\n:::\n\n\n\n\nYou should then be ready to use **GitHub**!\n\n## Step 4: Create a GitHub repository \n\nWe will follow the paradigm of \"**GitHub** first\". What this means is that when we create a repository, we will create it on **GitHub** first, then link a local repository to it from inside RStudio.\n\nAfter you've logged in, to create a **GitHub** repository\n\n-   Go to <https://github.com/new>\n\n-   Name the repository (give it a meaningful name)\n\n-   Give the repository a description (don't leave this blank although this is optional)\n\n-   Decide whether to keep the repository public or private (for now, let's just keep it public)\n\n-   Click on \"Initialize this repository with a README\". For now, there's no need to \"Add .gitignore\" or \"Choose a license\"\n\n-   Click on \"Create Repository\"\n\n## Step 5: Connect RStudio to the GitHub repository\n\n*   Go to the browser page for your GitHub repository\n\n*   Click on Code (in the same line as \"Go to file\"). Under HTTPS, copy the URL   \n\n*   In RStudio, click on `File > New Project....` Next, click on \"Version Control\" and then on \"Git\". Paste the URL you just copied into \"Repository URL\"\n\n*   Type the name for the folder on your computer associated with this repository into Project directory name \n\n    *   You can choose whatever name you want, but it is recommended to give a name similar to the repository name on GitHub\n    \n*   Make sure \"Create project as subdirectory of:\" points to where you want to locate this new folder\n\n*   Click on \"Create Project\"\n\n*   At this point, you should find that the \"Files\" pane (in the bottom right of RStudio) is listing the files in your local repository.\n\n## Step 6: Modify the repository\n\nTo add a new file from your local repository to **GitHub**:\n\n*   In RStudio, open a new file (could be anything - e.g. R Script, Quarto document, etc.). \n\n*   Fill the file with some code/comments/etc. (This is just for illustration purpose, to show how you can add a file to GitHub from your computer)\n\n*   Save the file. At this point, this file should show up in the \"Git\" pane (in the top right of RStudio)\n\n*   Check the box under \"Staged\" in the Git pane to stage the file for a commit\n\n*   Click on \"Commit\" in the Git pane\n\n*   In the new window that opens, add a \"Commit message\", then click on the \"Commit\" button\n\n*   Click on \"Push\" to push your changes from your local repository to the remote repository on GitHub\n\nIf you encountered no errors then youâ€™re done! While working on a single project you will repeatedly perform the tasks in Step 6: make changes to files, commit changes, then push changes\n\nEvery time you want to create a new repository, you can just start with Step 4, use GitHub, copy the repository into RStudio, then repeatedly update, commit, and push.\n\n**Ask us for help if you have any questions.**",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}