{
  "hash": "11d4f4bd999a1aca33933bdd1dbfe824",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: getting started with `R`\"\nformat: html\n---\n\n\n\nNOTE: To preview this file, click the \"Render\" button in RStudio. \n(The Shortcut for rendering/knitting in RStudio is Command + Shift + K for macOS users, or Ctrl + Shift + K for Windows users.)\n\n## Typical workflow\n\n### Writing `R` scripts\n\nYou can type `R` commands directly into the **Console** (lower left pane), but this can become quite tedious and annoying when your work becomes more complex. Instead, you can code in **R Scripts**. An R Script is a file type which `R` recognizes as storing `R` commands and is saved as a **.R** file. R Scripts are useful as we can edit our code before sending it to be run in the console. \n\nIn RStudio, to open a new R Script: File > New File > R Script.\n\n### Using Quarto\n\nAn **Quarto** file is a dynamic document for writing reproducible reports and communicating results. It contains the reproducible source code along with the narration that a reader needs to understand your work.\n\nThere are three important elements to a **Quarto** file:\n\n-   A YAML header at the top (surrounded by `---`)\n-   Chunks of `R` code surrounded by ```\n-   Text mixed with simple text formatting like `## Heading` and *italics*\n\n(Note that this file itself is a **Quarto** document.)\n\nIf you are familiar with the LaTeX syntax, math mode works like a charm in almost the same way:\n\n$$\nf (x) = \\frac{1}{\\sqrt{2\\pi}} \\exp \\left( - \\frac{x^2}{2} \\right)\n$$\n\nA chunk of embedded `R` code is the following:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R code here\nprint(\"Hello World\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello World\"\n```\n\n\n:::\n:::\n\n\n\nAll the lab documents will be **Quarto** files so you need to know how to render and convert them into a reader-friendly documents. We recommend to render as `html` file but if you have LaTeX installed, you can change the format to pdf.\n\nFor more details on Quarto, see the [comprehensive manual online](https://quarto.org/docs/guide) and the [Quarto chapter](https://r4ds.hadley.nz/quarto) of R for Data Science (2e). See also the guide on [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html) for more on Markdown syntax. For code chunk options, see [this guide](https://quarto.org/docs/computations/execution-options.html).\n\n## Installing R packages\n\n`R` performs a wide variety of functions, such as data manipulation, modeling, and visualization. The extensive code base beyond the built-in functions are managed by **packages** created from numerous statisticians and developers. The Comprehensive R Archive Network (CRAN) manages the open-source distribution and the quality control of the `R` packages.\n\nTo install an `R` package, using the function `install.packages` and put the package name in the parentheses and the quote. While this is preferred, for those using RStudio, you can also go to \"Tools\" then \"Install Packages\" and then input the package name.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\n**Important**: NEVER install new packages in a code block in a `.qmd` file. That is, the `install.packages()` function should NEVER be in your code chunks (unless they are commented out using `#`). The `library()` function, however, will be used throughout your code: The `library()` function loads packages only after they are installed.\n\nIf in any time you get a message says: \"Do you want to install from sources the package which needs compilation?\" Choose \"No\" will tend to bring less troubles. (Note: This happens when the bleeding-edge version package is available, but not yet compiled for each OS distribution. In many case, you can just proceed without the source compilation.)\n\nEach package only needs to be installed once. Whenever you want to use functions defined in the package, you need to load the package with the command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nHere is a list of packages that we may need (but not limited to) in the following lectures and/or labs. Make sure you can install all of them. If you fail to install any package, please update `R` and RStudio first and check the error message for any other packages that need to install first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(devtools)\nlibrary(ranger)\nlibrary(glmnet)\n```\n:::\n\n\n\n## Basic data type and operators\n\n### Data type: vector\n\nThe basic unit of `R` is a vector. A vector is a collection of values of the same type and the type could be:\n\n-   numeric (double/integer number): digits with optional decimal point\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(1, 5, 8.3, 0.02, 99999)\ntypeof(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n-   character: a string (or word) in double or single quotes, \"...\" or ’...’.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv2 <- c(\"apple\", \"banana\", \"3 chairs\", \"dimension1\", \">-<\")\ntypeof(v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n-   logical: TRUE and FALSE\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv3 <- c(TRUE, FALSE, FALSE)\ntypeof(v3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n\nNote: Oftentimes, `factor` is used to encode a character vector into unique numeric vector.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplayer_type <- c(\"Batter\", \"Batter\", \"Hitter\", \"Batter\", \"Hitter\")\nplayer_type <- factor(player_type)\nstr(player_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 2 levels \"Batter\",\"Hitter\": 1 1 2 1 2\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(player_type)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n\n### Data type: lists\n\nVector can store only single data type:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(c(1, TRUE, \"apple\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n**List** is a vector of vectors which can store different data types of vectors:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroster <- list(\n  name = c(\"Quang\", \"Yuchen\", \"Sara\", \"Erin\", \"Leigh\"),\n  role = c(\"Instructor\", \"TA\", \"TA\", \"TA\", \"TA\"),\n  is_TA = c(FALSE, TRUE, TRUE, TRUE, TRUE)\n)\nstr(roster)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 3\n $ name : chr [1:5] \"Quang\" \"Yuchen\" \"Sara\" \"Erin\" ...\n $ role : chr [1:5] \"Instructor\" \"TA\" \"TA\" \"TA\" ...\n $ is_TA: logi [1:5] FALSE TRUE TRUE TRUE TRUE\n```\n\n\n:::\n:::\n\n\n\n`R` uses a specific type of list, **data frame**, containing the same number of rows with unique row names.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(iris)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n### Operators\n\nWe can perform element-wise actions on vectors through the operators:\n\n-   arithmetic: `+`, `-`, `*`, `/`, `^` (for integer division, `%/%` is quotient, `%%` is remainder)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(1,2,3)\nv2 <- c(4,5,6)\n\nv1 + v2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 7 9\n```\n\n\n:::\n\n```{.r .cell-code}\nv1 * v2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4 10 18\n```\n\n\n:::\n\n```{.r .cell-code}\nv2 %% v1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 1 0\n```\n\n\n:::\n:::\n\n\n\n-   relation: `>`, `>=`, `<` ,`<=`, `==`, `!=`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n5 > 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n5 <= 4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n33 == 22\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n33 != 22\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n-   logic: `!` (not), `&` (and), `|` (or)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(5 > 6) | (2 < 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n(5 > 6) & (2 < 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n!(5 > 6) & (2 < 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n-   sequence: `i:j` (`:` operator, `i` and `j` are any two arbitrary numbers)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n\n```{.r .cell-code}\n5:1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 3 2 1\n```\n\n\n:::\n\n```{.r .cell-code}\n-1:-5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1 -2 -3 -4 -5\n```\n\n\n:::\n\n```{.r .cell-code}\n-1:5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1  0  1  2  3  4  5\n```\n\n\n:::\n:::\n\n\n\n## Loading `.csv` files\n\nMost of the data provided to you are in `.csv` format. In the code chunk below, we use the [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) function (from the `readr` package, part of the `tidyverse`) to load a dataset that is saved in a folder located in the SURE GitHub repository. In quotations, insert the file path where the dataset is located, which in this case is online. However, typically you'll save `.csv` files locally first and put them in an organized folder to access later.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nnba_stats <- read_csv(\"https://raw.githubusercontent.com/36-SURE/2025/main/data/nba_stats.csv\")\nhead(nba_stats)\n```\n:::\n\n\n\n## Looking for help\n\nIf you have any `R` problem, the best step is to use the `help()` function (or equivalently the `?`). For example,\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(str)\nhelp(lm)\n```\n:::\n\n\n\nOr you can use the command `?`...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?str\n?lm\n```\n:::\n\n\n\nDouble question marks can lead to a more general search.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??predict\n```\n:::\n\n\n\nYou should **ALWAYS** consult the `R` help documentation first before attempting to google around (or ask ChatGPT) for a solution.\n\n## Exercises\n\n1.  Create four vectors, `v1` and `v2` are numeric vectors, `v3` is a character vector and `v4` is a logic vector. Make sure the length of `v1` and `v2` are the same. (Hint: a way to check the length is to use the function `length()`)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R code here\n```\n:::\n\n\n\n2.  Preform add, minus, product and division on `v1` and `v2`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R code here\n```\n:::\n\n\n\n3.  Create four statements with both relation and logic operators, that 2 of them return `TRUE` and 2 of them return `FALSE`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R code here\n```\n:::\n\n\n\n4.  Create 2 sequences with length 20, one in an increasing order and the other in a decreasing order.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# R code here\n```\n:::\n\n\n\n## Text formatting in Quarto\n\nThere are a lot of ways to format text in a Quarto document, e.g., *italics* and **bold** (just scan through this `.qmd` file to see how this was done). See [this guide](https://quarto.org/docs/guide) for more tips/tricks. In particular, check out the [Markdown Basics](https://quarto.org/docs/guide/) and other guides under [Authoring](https://quarto.org/docs/authoring). See also [this guide](https://quarto.org/docs/computations/r.html) on `R` code chunk options.\n\nAs you'll see throughout this summer (and especially with your project), well-formatted `.html` files can be a great way to showcase data science results to the public online.\n## Customizing RStudio\n\n**RStudio theme**\n\nRStudio can be customized with different themes. To explore built-in themes,\n\n-   Navigate to the menu bar at the top of your screen\n-   Choose `Tools > Global Options > Appearance`\n-   Change your RStudio theme under Editor theme\n\n(FYI, Quang uses the *Tomorrow Night Bright* theme.)\n\nNote that within the Appearance tab, there are also options for changing your Editor font, Editor font size, etc.\n\n**RStudio panes**\n\nWithin RStudio, there are several panes (e.g., Console, Help, Environment, History, Plots, etc.). To customize, go to `Tools > Global Options > Pane Layout`, and arrange the panes as you see fit.\n\nFeel free to explore other options within the `Tools > Global Option` menu.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}