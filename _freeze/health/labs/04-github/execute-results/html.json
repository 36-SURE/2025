{
  "hash": "c87068c3bbddee9adc0141a6695f9022",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using GitHub for project collaboration\"\nformat: html\n---\n\n\n\n\n\n## Goal\n\nThe purpose of this lab is to help you set up Git and GitHub on your computer, and use them to collaborate on your EDA project.\n\n## Task 0: GitHub registration and Git installation\n\n**(Note: You were already being asked to complete these prior to the start of the program. Proceed to Task 1 if you already completed this task.)**\n\n**GitHub account.** Register for a (free) GitHub account at [`https://github.com`](https://github.com). <br>\n(if you already have a GitHub account, feel free to ignore this)\n\n**Download Git.** <br> (if Git is already installed on your computer, the following instructions still hold for updating Git to its latest version)\n\n(Windows) \n\n*   Go to [`https://git-scm.com/download/win`](https://git-scm.com/download/win)\n\n*   Navigate to \"Click here to download\" on the first line and click on it\n\n*   Follow the installation instructions\n\n(macOS)\n\n*   Open the Terminal app on your computer (Finder $\\rightarrow$ Applications $\\rightarrow$ Terminal)\n\n*   Go to [`https://brew.sh`](https://brew.sh) and copy/paste the chunk under \"Install Homebrew\" to the Terminal\n\n*   Once Homebrew is installed, type this into the Terminal:  `brew install git`\n\n## Task 1: Git configuration\n\n* Make sure you've already (i) created a GitHub account and (ii) installed Git on your computer\n\n* You then need to configure Git. This can be done directly in `R`:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# uncomment and run the following line to install the usethis package\n# install.packages(\"usethis\")\nusethis::use_git_config(user.name = \"Your Name\", user.email = \"your-github@email.address\")\n```\n:::\n\n\n\n\n\n* Use your full name for the `user.name` field and the same email as your GitHub account for `user.email`\n\n* You then need to create a *personal access token* for authentication as follows:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n\n\n\n* This will direct you to the GitHub site on your browser (you may have to log in). On this site:\n\n  *   Under \"Note\", type in some description for this token (e.g., \"SURE 2024 GitHub token\")\n  \n  *   For \"Expiration\", set an expiration date for this token (e.g., 90 days) or make it permanent (i.e. choose \"No expiration\" if you don't want to deal with this again in the future)\n  \n  *   Under \"Select scopes\", recommended scopes will be pre-selected. Stick with these for now.\n\n* Next, click on \"Generate token\"\n\n* Copy the token to your clipboard (or leave the browser window open, so you can come back to copy the token later)\n\n* In RStudio, run the following to get a prompt where you can paste your token:\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# uncomment and run the following line to install the gitcreds package\n# install.packages(\"gitcreds\")\ngitcreds::gitcreds_set()\n```\n:::\n\n\n\n\n\n\n## Task 2: EDA project collaboration with Git and GitHub\n\nMake sure every group member finishes Task 1 before proceeding to Task 2, which requires a group effort.\n\n### Step 1: Create an EDA project repository on GitHub<br>(Required for ONE group member only)\n\n**Each group should elect ONE person to create a GitHub repository for the EDA project.** This repository is to be shared among all group members. \n\nThe elected group member should do the following to create a new GitHub repository:\n\n*   After you've signed in to GitHub, go to [`https://github.com/new`](https://github.com/new)\n\n*   Name the repository (give it a meaningful name)\n\n*   Give the repository a description (don't leave this blank although this is optional)\n\n*   Decide whether to keep the repository public or private (for now, keep it public, so that we can review your code)\n\n*   Click on \"Initialize this repository with a README\". For now, there's no need to \"Add .gitignore\" or \"Choose a license\"\n\n*   Click on \"Create Repository\"\n\nNext, to add the rest of your group to the repository:\n\n*   Go to browser page of the GitHub repository you just created and click on \"Settings\"\n\n*   Navigate to the left sidebar and click on \"Collaborators\"\n\n*   Click on \"Add people\" (under Manage access). Enter the GitHub username for the other group members. \n\n### Step 2: Clone the remote repository to your local computer<br>(Required for ALL group members)\n\n*   Everyone (except the member responsible for creating the repository) should each get an invitation sent to the email associated with your GitHub account\n\n*   Check your email and accept the invitation\n\n*   Go to the browser page for the EDA project GitHub repository (created in Step 1)\n\n*   Click on Code (in the same line as \"Go to file\"). Under HTTPS, copy the URL   \n\n*   In RStudio, click on `File > New Project....` Next, click on \"Version Control\" and then on \"Git\". Paste the URL you just copied into \"Repository URL\"\n\n*   Type the name for the folder on your computer associated with this repository into Project directory name \n\n    *   You can choose whatever name you want, but it is recommended to give a name similar to the repository name on GitHub\n    \n*   Make sure \"Create project as subdirectory of:\" points to where you want to locate this new folder\n\n*   Click on \"Create Project\"\n\n*   At this point, you should find that the \"Files\" pane (in the bottom right of RStudio) is listing the files in your local repository.\n\n### Step 3: Modify the repository <br>(Required for ALL group members)\n\nEach group member should create their own \"sandbox\" folder locally on their own computer as follows:\n\n*  Navigate to the Files pane in RStudio and click on \"Folder\" to create a new folder (for the new folder name, use your last name.)\n\n*  In RStudio, open a new file (could be anything - e.g. R Script, Quarto document, etc.). Fill the file with some code/comments/etc. (This is just for illustration purpose, to show how you can add a file to GitHub from your computer)\n\n*   Save the file inside the folder you just created (with your last name as the folder name). At this point, this file should show up in the \"Git\" pane (in the top right of RStudio)\n\n*   Check the box under \"Staged\" in the Git pane to stage the file for a commit\n\n*   Click on \"Commit\" in the Git pane\n\n*   In the new window that opens, add a \"Commit message\", then click on the \"Commit\" button\n\n*   Click on \"Push\" to push your changes from your local repository to the shared remote  repository on GitHub\n\n### Step 4: Update the local repository <br>(Required for ALL group members)\n\n*   First, make sure that everyone in your group have completed Step 3\n\n*   In RStudio, navigate to the Git pane and click on \"Pull\". A new window will pop up. Once everything is finished running, close the window.\n\n*   At this point, you should find that your `Files` pane in RStudio is listing the folders that your group members have created, in addition to your own folder\n\n    *   This task is know as `git pull`, which updates the local repository to match that content of a shared remote repository\n    \n### Step 5: Start your EDA project\n\nIf you encountered no errors then you can feel free to start brainstorming your EDA project with your group.\n\n**For this project, we ask you to create/update/save files within your own sandbox folder** (that you created in Step 3). This will help mitigate the risk of running into trouble when pushing your files to GitHub, especially for those who are new to Git and GitHub. This also allows us to easily review your code.\n\n::: callout-important\n# Important notes\n\nThe GitHub procedure for any project collaboration is\n\n1. Pull new changes\n\n2. Make changes on your computer (e.g. create new files, update existing files)\n\n3. Commit your local changes (Note: this step may be repeated)\n\n4. Pull again to avoid merge conflicts\n\n5. Push your commit(s) to GitHub\n\nAdvices: Make small, frequent commits. ALWAYS pull before you push.\n:::\n\n**Ask us for help if you run into any issues or have any questions.**\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}