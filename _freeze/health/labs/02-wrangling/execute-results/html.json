{
  "hash": "e32a2c09681b7d5bb54385f5da85fc1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: data wrangling\"\nformat: html\n---\n\n\n\n## Reading and previewing data\n\nOur data are usually stored as a `.csv` file and after loading a `.csv` file into RStudio, we will have a \"data frame\". A data frame can be considered a special case of matrix where each column represents a measurement or variable of interest for each observation which correspond to the rows of the dataset. After loading the `tidyverse` suite of packages, we use the [`read_csv()`](https://readr.tidyverse.org/reference/read_delim.html) function to load the `heart_disease` dataset from yesterday:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nheart_disease <- read_csv(\"https://raw.githubusercontent.com/36-SURE/2025/main/data/heart_disease.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 788 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Gender\ndbl (9): Cost, Age, Interventions, Drugs, ERVisit, Complications, Comorbidit...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\nBy default, `read_csv()` reads in the dataset as a `tbl` (aka `tibble`) object instead of a `data.frame` object. You can read about the differences [here](https://cran.r-project.org/web/packages/tibble/vignettes/tibble.html), but it's not that meaningful for purposes.\n\nWe can use the functions `slice_head()` and `slice_tail()` to view a sample of the data. Use the `slice_head()` function to view the first 6 rows, then use the `slice_tail()` function to view the last 3 rows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nView the dimensions of the data with `dim()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nQuickly view summary statistics for all variables with the `summary()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment the following code by deleting the # at the front\n# summary(heart_disease)\n```\n:::\n\n\n\nView the data structure types with `str()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str(heart_disease)\n```\n:::\n\n\n\nWhat's the difference between the output from the two functions?\n\nYou can find a description of the dataset [here](https://www.stat.cmu.edu/cmsac/sure/2022/materials/data/health/intro_r/heart_disease_README.txt).\n\n## Data manipulation with `dplyr`\n\nAn easier way to manipulate the data frame is through the `dplyr` package, which is in the `tidyverse` suite of packages. The operations we can do include: selecting specific columns, filtering for rows, re-ordering rows, adding new columns and summarizing data. The \"split-apply-combine\" concept can be achieved by `dplyr`.\n\n### Selecting columns with `select()`\n\nThe function `select()` can be use to select certain column with the column names. First create a new table called `heart_disease_ad` that only contains the `Age` and `Drugs` columns:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nTo select all columns except a specific column, use the `-` (subtraction) operator. For example, view the output from uncommenting the following line of code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select(heart_disease, -Interventions)\n```\n:::\n\n\n\nTo select a range of columns by name (that are in consecutive order), use the `:` (colon) operator. For example, view the output from uncommenting the following line of code:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select(heart_disease, Drugs:Duration)\n```\n:::\n\n\n\nTo select all columns that start with certain character strings, use the function `starts_with()`. Other matching options are:\n\n1.  `ends_with()`: select columns that end with a character string\n\n2.  `contains()`: select columns that contain a character string\n\n3.  `matches()`: select columns that match a regular expression\n\n4.  `one_of()`: select columns names that are from a group of names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Uncomment the following lines of code\n# select(heart_disease, starts_with(\"Com\"))\n# select(heart_disease, contains(\"er\"))\n```\n:::\n\n\n\n### Extracting rows using `filter()`\n\nWe can also extract the rows/observations that satisfy certain criteria. Try extracting the rows with `Cost` of more than 400:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nWe can also filter on multiple criteria. Subset the rows that are male patients and 60+ years old.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n### Arranging rows using `arrange()`\n\nTo arrange the data frame by a specific order we need to use the function `arrange()`. The default is by increasing order and the `desc()` will provide the decreasing order. First arrange the `heart_disease` table by `Duration` in ascending order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nNext by descending order:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nTry combining a pipeline of `select()`, `filter()`, and `arrange()` steps together with the `|>` operator by:\n\n1.  Selecting the `Age`, `Cost`, `ERVisit`, and `Duration` columns\n2.  Subset only patients who are 60 or older\n3.  Sort by `Duration` in descending order\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\n### Creating new columns using `mutate()`\n\nSometimes the data does not include the variable that we are interested in and we need to manipulate the current variables to add new variables into the data frame. Create a new column `cost_per_day` by taking the `Cost` and dividing by `Duration` (reassign this output to the `heart_disease` table following the commented code chunk so this column is added to the table):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# heart_disease <- heart_disease |>\n#   mutate(INSERT CODE HERE)\n```\n:::\n\n\n\n### Creating summaries with `summarize()`\n\nTo create summary statistics for a given column in the data frame, we can use `summarize()` function. Compute the `mean`, `min`, and `max` amount of `Cost`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nThe advantage of `summarize()` is more obvious if we combine it with `group_by()`, the group operators. Try to `group_by()` the `Gender` column first and then compute the same summary statistics for `Cost`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n",
    "supporting": [
      "02-wrangling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}