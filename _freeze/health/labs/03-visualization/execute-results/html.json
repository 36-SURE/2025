{
  "hash": "2245e10c190556d69a02c8131af84baf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab: data visualization\"\nformat: html\n---\n\n\n\n## Reading in data\n\nLet's start again by reading in the data from yesterday using the `read_csv()` function after loading the `tidyverse`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nheart_disease <- read_csv(\"https://raw.githubusercontent.com/36-SURE/2025/main/data/heart_disease.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 788 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): Gender\ndbl (9): Cost, Age, Interventions, Drugs, ERVisit, Complications, Comorbidit...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n## Previewing the data\n\nWrite code that displays the column names of `heart_disease`. Also, look at the first six rows of your dataset to get an idea of what these variables look like. Which variables are quantitative, and which are categorical?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# INSERT CODE HERE\n```\n:::\n\n\n\nAs it turns out, even though `Drugs` and `Complications` appear to be quantitative - they are actually categorical variables. Specifically, `Drugs` represents the categorized number of drugs prescribed: 0 if none, 1 if one, 2 if more than one; `Complications` indicates whether or not the subscriber had complications: 1 if yes, 0 if no. To address this issue for our plots, we can manually recode the variables as **factors**. For instance, we can modify the `Complications` variable using a simple if-else statement:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease <- heart_disease |>\n  mutate(Complications = ifelse(Complications == 0, \"No\", \"Yes\"))\n```\n:::\n\n\n\nThis is a quick fix to the binary indicator variable since, by default, `R` orders factor variables in alphabetical order. In this case, \"No\" is before \"Yes\" because \"N\" is before \"Y\". We may not want variables in alphabetical order however - we will see how to change this in lecture.\n\nNext, to update the `Drugs` variable we will use the [`fct_recode()`](https://forcats.tidyverse.org/reference/fct_recode.html) function which allows us to manually change the labels of a factor variable:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease <- heart_disease |>\n  mutate(Drugs = fct_recode(as.factor(Drugs), \n                            \"None\" = \"0\", \"One\" = \"1\", \"More than one\" = \"2\"))\n```\n:::\n\n\n\n*Why did we have to specify `as.factor(Drugs)` first then place the numbers in quotation marks?*\n\n## Always make a bar chart...\n\nNow we'll use the `ggplot()` function to create a **bar chart** of the `Drugs` variable. To make things easier, we provide the code for you to do this below; just uncomment the code and run it to create the bar chart. In what follows, you must answer some questions about the code and plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create the bar chart of Drugs:\n# heart_disease |>\n#   ggplot(aes(x = Drugs)) +\n#   geom_bar(fill = \"darkblue\") +\n#   labs(title = \"Number of patients by number of drugs\",\n#        x = \"Number of drugs\",\n#        y = \"Number of patients\")\n```\n:::\n\n\n\nAnswer the following questions about the code and plot:\n\n-   In general, `ggplot()` code takes the following format: `ggplot(blank1, aes(x = blank2))`. Looking at the above code, what kind of `R` object should `blank1` be, and what should `blank2` be?\n\n-   What do you think the line `geom_bar(fill = \"darkblue\")` does?\n\n-   What do you think the remaining lines of code do (contained in `labs()`)?\n\n## More area plots (but bar charts are better!)\n\nNow we'll make a few other **area plots**:\n\n-   spine chart\n\n-   pie chart\n\n-   rose diagram\n\nYour goal for this part is to create each of these plots. These plots can be created by copy-and-pasting the bar chart code from above and modifying it slightly. Follow these directions to create each of these plots:\n\n-   **spine chart**: First, copy-and-paste the bar chart code from above. Then, delete the `fill = \"darkblue\"` within `geom_bar()`. Finally, within `ggplot()`, replace `aes(x = Drugs)` with `aes(x = \"\", fill = Drugs)`. Also, change the labels in `labs()` if necessary.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# PUT YOUR SPINE CHART CODE HERE\n```\n:::\n\n\n\n-   **pie chart**: First, copy-and-paste the **spine chart code** you just made. Then, after `geom_bar()`, \"add\" `coord_polar(\"y\")`. Be sure to put plus signs before and after `coord_polar(\"y\")`. Also, change the labels in `labs()` if necessary.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# PUT YOUR PIE CHART CODE HERE\n```\n:::\n\n\n\n-   **rose diagram**: First, copy-and-paste your original bar chart code. Then, after `geom_bar(fill = \"darkblue\")`, \"add\" `coord_polar() + scale_y_sqrt()`. Be sure to put plus signs before and after `coord_polar() + scale_y_sqrt()`. Also, change the labels in `labs()` if necessary. After you make the rose diagram: In 1-2 sentences, what do you think `scale_y_sqrt()` does, and what is a benefit to including `scale_y_sqrt()` when making the rose diagram?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# PUT YOUR ROSE DIAGRAM CODE HERE\n```\n:::\n\n\n\n## Notes on colors in plots\n\nThree types of color scales to work with:\n\n1.  **Qualitative**: distinguishing discrete items that don't have an order (nominal categorical). Colors should be distinct and equal with none standing out unless otherwise desired for emphasis.\n\n-   Do **NOT** use a discrete scale on a continuous variable\n\n2.  **Sequential**: when data values are mapped to one shade, e.g., for an ordered categorical variable or low to high continuous variable\n\n-   Do **NOT** use a sequential scale on an unordered variable\n\n3.  **Divergent**: think of it as two sequential scales with a natural midpoint midpoint could represent 0 (assuming +/- values) or 50% if your data spans the full scale\n\n-   Do **NOT** use a divergent scale on data without natural midpoint\n\n### Options for `ggplot2` colors\n\nThe default color scheme is pretty bad to put it bluntly, but `ggplot2` has ColorBrewer built in which makes it easy to customize your color scales. For instance, we can make a scatterplot with `Cost` on the y-axis and `Duration` on the x-axis and using the `geom_point()` layer with each point colored by `Drugs`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Drugs)) +\n  geom_point(alpha = 0.5) +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Number of drugs\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n*What does `alpha` change?* We can change the color plot for this plot using `scale_color_brewer()` function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Drugs)) +\n  geom_point(alpha = 0.5) +\n  scale_color_brewer(palette = \"Set2\") +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Number of drugs\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\nWhich do you prefer, the default palette or this new one? You can [check out more color palettes here.](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html)\n\nSomething you should keep in mind is to pick a [color-blind friendly palette](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/). One simple way to do this is by using the `ggthemes` package (you need to install it first before running this code!) which has color-blind friendly palettes included:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Drugs)) +\n  geom_point(alpha = 0.5) +\n  # call the function directly from the package using `::` instead of library(ggthemes)\n  ggthemes::scale_color_colorblind() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Number of drugs\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\nIn terms of displaying color from low to high, the [viridis scales](https://ggplot2.tidyverse.org/reference/scale_viridis.html) are excellent choices (and are also color-blind friendly!). For instance, we can map another quantitative variable (`Interventions`) to the color:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nWhat does this reveal about the plot? What happens if you delete `scale_color_viridis_c() +` from above? Which do you prefer?\n\n## Notes on themes\n\nYou might have noticed above have various changes to the `theme` of plots for customization. **You will constantly be changing the theme of your plots to optimize the display.** Fortunately, there are a number of built-in themes you can use to start with rather than the default `theme_gray()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\nFor instance, Quang's go-to theme is `theme_light()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\nThere are options such as `theme_minimal()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\nor `theme_classic()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\nor `theme_bw()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\nThere are also packages with popular, such as the `ggthemes` package which includes, for example, `theme_economist()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_economist()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\nand `theme_fivethirtyeight()`, to name a couple:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       color = \"Interventions\") +\n  theme_fivethirtyeight()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\nWith any theme you have picked, you can then modify specific components directly using the `theme()` layer. There are [many aspects of the plot's theme to modify](https://ggplot2.tidyverse.org/reference/theme.html), such as my decision to move the legend to the bottom of the figure, drop the legend title, and increase the font size for the y-axis:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost, color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       title = \"Joint distribution of patients' duration and cost\",\n       color = \"Interventions\") +\n  theme_light() +\n  theme(legend.position = \"bottom\",\n        legend.title = element_blank(),\n        axis.text.y = element_text(size = 14),\n        axis.text.x = element_text(size = 6))\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\nIf you're tired of explicitly customizing every plot in the same way all the time, then you should make a custom theme. It's quite easy to make a custom theme for `ggplot2` and of course [there are an incredible number of ways to customize your theme](https://themockup.blog/posts/2020-12-26-creating-and-using-custom-ggplot2-themes/). Below, we modify `theme_bw()` using the `%+replace%` argument to a new customized theme named `theme_cus()` - which is stored as a function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_cus <- function() {\n  # start with the base font size\n  theme_bw(base_size = 10) %+replace%\n    theme(\n      panel.background  = element_blank(),\n      plot.background = element_rect(fill = \"transparent\", color = NA), \n      legend.position = \"bottom\",\n      legend.background = element_rect(fill = \"transparent\", color = NA),\n      legend.key = element_rect(fill = \"transparent\", color = NA),\n      axis.ticks = element_blank(),\n      panel.grid.major = element_line(color = \"grey90\", linewidth = 0.3), \n      panel.grid.minor = element_blank(),\n      plot.title = element_text(size = 15, hjust = 0, vjust = 0.5, face = \"bold\", \n                                margin = margin(b = 0.2, unit = \"cm\")),\n      plot.subtitle = element_text(size = 12, hjust = 0, vjust = 0.5, \n                                   margin = margin(b = 0.2, unit = \"cm\")),\n      plot.caption = element_text(size = 7, hjust = 1, face = \"italic\", \n                                  margin = margin(t = 0.1, unit = \"cm\")),\n      axis.text.x = element_text(size = 13),\n      axis.text.y = element_text(size = 13)\n    )\n}\n```\n:::\n\n\n\nCreate the plot from before with this theme:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nheart_disease |>\n  ggplot(aes(x = Duration, y = Cost,\n             color = Interventions)) +\n  geom_point(alpha = 0.5) +\n  scale_color_viridis_c() +\n  labs(x = \"Duration\", \n       y = \"Cost\",\n       title = \"Joint distribution of patients' duration and cost\",\n       color = \"Interventions\") +\n  theme_cus()\n```\n\n::: {.cell-output-display}\n![](03-visualization_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "03-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}