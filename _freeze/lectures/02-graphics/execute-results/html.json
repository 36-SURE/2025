{
  "hash": "de1f65c08d89dbd8367b298b7a592954",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data visualization: the grammar of graphics and `ggplot2`\"\nauthor: \"<br>SURE 2025<br><br>Department of Statistics & Data Science<br>Carnegie Mellon University\"\nfooter:  \"[36-SURE.github.io/2025](https://36-sure.github.io/2025)\"\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    smaller: true\n    slide-number: c/t\n    code-line-numbers: false\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n\n# Motivation and background\n\n## Goals of data visualization\n\n-   to represent the data in a visual way (enough with tables... though tables are useful in a lot of situations)\n\n. . .\n\n-   most importantly, to deliver the information to your audience and help them understand the story behind the data\n\n\n. . .\n\n> [Data Visualization (good DataViz anyway) answers a question.](https://dataservices.uoregon.edu/2022/06/02/beyond-data-visualization-data-as-art-talk-by-dr-greg-mathews/) - Greggy J. M.\n\n## ALWAYS visualize your data before modeling and analysis\n\n**Anscombe's quartet**\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-2-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 6\n  set   x_mean x_var y_mean y_var x_y_cor\n  <chr>  <dbl> <dbl>  <dbl> <dbl>   <dbl>\n1 1          9    11   7.50  4.13   0.816\n2 2          9    11   7.50  4.13   0.816\n3 3          9    11   7.5   4.12   0.816\n4 4          9    11   7.50  4.12   0.817\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n## ALWAYS visualize your data before modeling and analysis\n\n**The Datasaurus dozen**\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 6\n   dataset    x_mean x_var y_mean y_var x_y_cor\n   <chr>       <dbl> <dbl>  <dbl> <dbl>   <dbl>\n 1 away         54.3  281.   47.8  726. -0.0641\n 2 bullseye     54.3  281.   47.8  726. -0.0686\n 3 circle       54.3  281.   47.8  725. -0.0683\n 4 dino         54.3  281.   47.8  726. -0.0645\n 5 dots         54.3  281.   47.8  725. -0.0603\n 6 h_lines      54.3  281.   47.8  726. -0.0617\n 7 high_lines   54.3  281.   47.8  726. -0.0685\n 8 slant_down   54.3  281.   47.8  726. -0.0690\n 9 slant_up     54.3  281.   47.8  726. -0.0686\n10 star         54.3  281.   47.8  725. -0.0630\n11 v_lines      54.3  281.   47.8  726. -0.0694\n12 wide_lines   54.3  281.   47.8  726. -0.0666\n13 x_shape      54.3  281.   47.8  725. -0.0656\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n## Viz crime?\n\n**Florence Nightingale's rose diagram**\n\n<center>![](https://daily.jstor.org/wp-content/uploads/2020/08/florence_nightingagle_data_visualization_visionary_1050x700.jpg){width=\"749\"}</center>\n\n## Viz crime?\n\n<center>![](https://raw.githubusercontent.com/ryurko/SURE22-examples/main/figures/lecture_examples/nyt_ex.png)</center>\n\n## Previously...\n\nGet batting stats for each year: each row is a year with the following variables\n\ntotal hits, home runs, strikeouts, walks, atbats\ntotal batting average for each year = total H / total AB\nonly keeps AL and NL leagues\n\n## Previously...\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\nYearly MLB batting statistics from `Lahman` with `tidyverse`:\n\n* total hits, home runs, strikeouts, walks, at bats\n* total batting average for each year<br>= total H / total AB\n* only keeps AL and NL leagues\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(Lahman) \nyearly_batting <- Batting |>\n  filter(lgID %in% c(\"AL\", \"NL\")) |>\n  group_by(yearID) |>\n  summarize(total_h = sum(H, na.rm = TRUE),\n            total_hr = sum(HR, na.rm = TRUE),\n            total_so = sum(SO, na.rm = TRUE),\n            total_bb = sum(BB, na.rm = TRUE),\n            total_ab = sum(AB, na.rm = TRUE)) |>\n  mutate(batting_avg = total_h / total_ab)\n```\n:::\n\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\nHow do we make data visualization?\n\nWhat are the steps to make this figure below?\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## The grammar of graphics\n\n-   Key idea: specify plotting \"layers\" and combine them to produce a graphic\n\n-   `ggplot2` provides an implementation of the grammar of graphics\n\n-   The following layers are building blocks of data graphics\n\n. . .\n\n1.  data - one or more datasets (in tidy tabular format)\n\n2.  geom - geometric objects to visually represent the data (e.g. points, lines, bars, etc.)\n\n3.  aes - mappings of variables to visual properties (i.e. aesthetics) of the geometric objects\n\n4.  scale - one scale for each variable displayed (e.g. axis limits, log scale, colors, etc.)\n\n5.  facet - similar subplots (i.e. facets) for subsets of the same data using a conditioning variable\n\n6.  stat - statistical transformations and summaries (e.g. identity, count, smooth, quantile, etc.)\n\n7.  coord - one or more coordinate systems (e.g. cartesian, polar, map projection)\n\n8.  labs - labels/guides for each variable and other parts of the plot (e.g. title, subtitle, caption, etc.)\n\n9.  theme - customization of plot layout (e.g. text size, alignment, legend position, etc.)\n\n::: aside\nLeland Wilkinson wrote the book \"The Grammar of Graphics\", originally published in 1999.\n:::\n\n# A walkthrough of `ggplot2`\n\n## First, start with the data\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(data = yearly_batting)\n```\n:::\n\n\n\n\n<br>\n\nor equivalently, using `|>`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot()\n```\n:::\n\n\n\n\n<br>\n\nSo far, nothing is displayed\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Specify variables and geometric object\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot() +\n  geom_point(aes(x = yearID, y = total_hr))\n```\n:::\n\n\n\n\n-   Adding (`+`) a geometric layer of points to the plot\n\n-   Map `yearID` to the x-axis and `total_hr` to the y-axis via `aes()`\n\n-   Implicitly using `coord_cartesian()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot() + \n  geom_point(aes(x = yearID, y = total_hr)) +\n  coord_cartesian()\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Now, can we add another geometric layer?\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot() +\n  geom_point(aes(x = yearID, y = total_hr)) +\n  geom_line(aes(x = yearID, y = total_hr))\n```\n:::\n\n\n\n\n-   Adding (`+`) a line geometric layer\n\n-   Include mappings shared across geometric layers inside `ggplot()`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |>\n  ggplot(aes(x = yearID, y = total_hr)) +\n  geom_point() +\n  geom_line()\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Scaling axes: changing axis label breaks\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |>\n  ggplot(aes(x = yearID, y = total_hr)) +\n  geom_point() +\n  geom_line() +\n  scale_y_continuous(breaks = seq(0, 6000, 1000))\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Scaling axes: customizing axis limits\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |>\n  ggplot(aes(x = yearID, y = total_hr)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(limits = c(2000, 2015))\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Scaling axes: having different axis scales\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point() +\n  geom_line() + \n  scale_x_reverse() +\n  scale_y_log10()\n```\n:::\n\n\n\n\nWe can easily adjust variable scales without directly modifying the columns in the data\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Adding a statistical summary\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point() +\n  geom_line() + \n  stat_smooth()\n```\n:::\n\n\n\n\n-   Smoothing regression summary (will cover later) using `yearID` and `total_hr`\n-   Geometric layers implicitly use a default statistical summary\n-   Technically we're already using `geom_point(stat = \"identity\")`\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point() +\n  geom_line() +\n  geom_smooth()\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Mapping additional variables\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr,\n             color = total_so,\n             size = total_bb)) +\n  geom_point() +\n  geom_line()\n```\n:::\n\n\n\n\n-   `total_hr`, `total_so`, and `total_bb` are all displayed\n\n-   `color` and `size` are being shared globally across layers\n\n-   This is a bit odd to look at...\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Customizing mappings by layer\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line()\n```\n:::\n\n\n\n\n-   Now mapping `total_so` and `total_bb` to `color` and `size` of the point layer only\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-29-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Changing aesthetics without mapping variables\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\")\n```\n:::\n\n\n\n\n-   Manually set the `color` and `linetype` of the line layer\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-31-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Remember: one scale for each mapped variable\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\") +\n  scale_color_gradient(low = \"darkblue\", high = \"gold\") +\n  scale_size_continuous(breaks = seq(0, 20000, 2500))\n```\n:::\n\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-33-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Always label your plots! (seriously...)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\") +\n  scale_color_gradient(low = \"darkblue\", high = \"gold\") +\n  labs(\n    x = \"Year\",\n    y = \"Homeruns\",\n    color = \"Strikeouts\",\n    size = \"Walks\",\n    title = \"The rise of three true outcomes in baseball\",\n    caption = \"Data courtesy of Lahman\"\n  )\n```\n:::\n\n\n\n\n-   Each mapped aesthetic can be labeled\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-35-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Custom theme\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n<br>\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  ggplot(aes(x = yearID, y = total_hr)) + \n  geom_point(aes(color = total_so, size = total_bb)) +\n  geom_line(color = \"darkred\", linetype = \"dashed\") +\n  scale_color_gradient(low = \"darkblue\", high = \"gold\") +\n  labs(\n    x = \"Year\",\n    y = \"Homeruns\",\n    color = \"Strikeouts\",\n    size = \"Walks\",\n    title = \"The rise of three true outcomes in baseball\",\n    caption = \"Data courtesy of Lahman\"\n  ) +\n  theme_bw(base_size = 20) +\n  theme(legend.position = \"bottom\",\n        plot.title = element_text(hjust = 0.5, \n                                  face = \"bold\"))\n```\n:::\n\n\n\n\n-   For more theme options, check out the [`ggthemes`](https://jrnold.github.io/ggthemes/) and [`hrbrthemes`](https://cinc.rud.is/web/packages/hrbrthemes/) packages\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-37-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## A lesson about data visualization...\n\n-   So far we've plotted total home runs across the years, with point size representing total walks and point color representing total strikeouts\n\n. . .\n\n-   **Simpler is better.** What can we do to improve and make the plot simpler?\n\n. . .\n\n-   How about creating three separate plots for home runs, strikeouts, and walks, with each mapped to the y-axis?\n\n-   But how do we do this without repeating the same code?\n\n## Pivoting\n\nRemember: data should be in tidy format\n\nWithin the tidyverse, the `tidyr` package offers functions for reshaping the data\n\n-   `pivot_longer`: casts/gathers information spread out across variables\n\n    -   transforms data from wide format into long format\n\n    -   increase number of rows and decrease number of columns\n\n-   `pivot_wider`: melts/spreads information out from observations\n\n    -   transforms data from long format into wide format\n\n    -   decrease number of rows and increase number of columns\n\n::: aside\n[Some terminology](https://en.wikipedia.org/wiki/Wide_and_narrow_data)\n\nPredecessors: [`reshape`](https://www.jstatsoft.org/article/view/v021i12) and [`reshape2`](https://cran.r-project.org/web/packages/reshape2/reshape2.pdf)\n:::\n\n## Pivoting\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |> \n  select(yearID, HRs = total_hr, Strikeouts = total_so, Walks = total_bb) |> # renaming while also selecting\n  pivot_longer(HRs:Walks, # can also do !yearID (to select everything but yearID)\n               names_to = \"stat\",\n               values_to = \"val\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 444 × 3\n   yearID stat         val\n    <int> <chr>      <int>\n 1   1876 HRs           40\n 2   1876 Strikeouts   589\n 3   1876 Walks        336\n 4   1877 HRs           24\n 5   1877 Strikeouts   726\n 6   1877 Walks        345\n 7   1878 HRs           23\n 8   1878 Strikeouts  1081\n 9   1878 Walks        364\n10   1879 HRs           58\n# ℹ 434 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe've pivoted the data and created the following variables\n\n-   `stat`, to represent the name of the batting statistics\n-   `val`, to represent the total value of each statistic in each year.\n\n## Faceting\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nyearly_batting |>\n  select(yearID, HRs = total_hr, \n         Strikeouts = total_so, Walks = total_bb) |>\n  pivot_longer(HRs:Walks, \n               names_to = \"stat\", \n               values_to = \"val\") |>\n  ggplot(aes(yearID, val)) +\n  geom_line(color = \"darkblue\") +\n  geom_point(alpha = 0.8, color = \"darkblue\") +\n  facet_wrap(~ stat, scales = \"free_y\", ncol = 1) +\n  labs(\n    x = \"Year\", \n    y = \"Total of statistic\",\n    title = \"The rise of three true outcomes in baseball\",\n    caption = \"Data courtesy of Lahman\"\n  ) +\n  theme_bw(base_size = 20) +\n  theme(strip.background = element_blank(),\n        plot.title = element_text(hjust = 0.5, \n                                  face = \"bold\"))\n```\n:::\n\n\n\n\n-   Create a multi-panel plot faceted by a conditioning variable (in our case, `stat`)\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](02-graphics_files/figure-revealjs/unnamed-chunk-40-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n::: aside\nThese facet/panel plots are sometimes called trellis plots (or lattice plots)\n:::\n\n## Exercise\n\nThe [`babynames` package](https://hadley.github.io/babynames) contains a dataset (also) named `babynames`, which contains information on the number of children of each sex given each name from 1880 to 2017, provided by the United States Social Security Administration.\n\nHow does the popularity (in terms of frequency) of your own name (combination of name and sex) change over time? Also, stick a thick, red, vertical dashed line on the plot at your birth year (try `geom_vline()`).\n\nNext, pick two other names and compare their popularity over time with your own name.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# install.packages(\"babynames\")\n# library(babynames)\n# babynames |> \n#   INSERT CODE HERE\n```\n:::\n\n\n\n\n\n\n## Resources\n\n*   [`ggplot2` website](https://ggplot2.tidyverse.org/): cheatsheets, FAQs, extensions, and more\n\n*   [TidyTuesday](https://github.com/rfordatascience/tidytuesday)\n\n*   [David Robinson's TidyTuesday screencasts](https://www.youtube.com/@safe4democracy/streams)\n\n*   [VizBuzz](https://www.youtube.com/playlist?list=PL6PX3YIZuHhwZ-C-jZ427D-XkLGNWFPVB): LIVE data viz replication game show\n\n    *   [Quang on VizBuzz](https://youtu.be/fbyuQH7pNjU&t=457) (will participate again this summer!)\n\n<!-- ::: columns -->\n\n<!-- ::: {.column width=\"50%\" style=\"text-align: left;\"} -->\n\n<!-- c1 -->\n\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\" style=\"text-align: left;\"} -->\n\n<!-- c2 -->\n\n<!-- ::: -->\n\n<!-- ::: -->\n",
    "supporting": [
      "02-graphics_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}