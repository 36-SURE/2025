{
  "hash": "c3cdf43303193ea4cda309bf0e337f0b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data visualization: density estimation\"\nauthor: \"<br>SURE 2025<br><br>Department of Statistics & Data Science<br>Carnegie Mellon University\"\nfooter:  \"[36-SURE.github.io/2025](https://36-sure.github.io/2025)\"\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    smaller: true\n    slide-number: c/t\n    code-line-numbers: false\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n# Background\n\n## Data: Caitlin Clark's shots\n\nShot attempts by the [Caitlin Clark](https://en.wikipedia.org/wiki/Caitlin_Clark) in the 2024 WNBA season using [`wehoop`](https://wehoop.sportsdataverse.org/)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntheme_set(theme_light())\nclark_shots <- read_csv(\"https://raw.githubusercontent.com/36-SURE/2025/main/data/clark_shots.csv\")\nglimpse(clark_shots)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 658\nColumns: 6\n$ scoring_play  <lgl> TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, TRU…\n$ score_value   <dbl> 3, 0, 0, 3, 0, 0, 2, 0, 2, 0, 0, 2, 2, 0, 2, 0, 2, 0, 0,…\n$ shot_x        <dbl> -17, -1, -14, -17, -18, -1, 5, 6, 1, -16, -19, 0, 2, -7,…\n$ shot_y        <dbl> 22, 33, 16, 19, 20, 0, 6, 30, 1, 21, 13, 4, 1, 32, 1, 14…\n$ shot_distance <dbl> 27.802878, 33.015148, 21.260292, 25.495098, 26.907248, 1…\n$ shot_type     <chr> \"Running Pullup Jump Shot\", \"Pullup Jump Shot\", \"Step Ba…\n```\n\n\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n-   Each row is a shot attempt by Caitlin Clark in the 2023 WNBA season\n\n-   **Categorical** / qualitative variables: `scoring_play`, `shot_type`\n\n-   **Continuous** / quantitative variables: `shot_x`, `shot_y`, `shot_distance`, `score_value`\n\n## Revisiting [histograms](https://ggplot2.tidyverse.org/reference/geom_histogram.html)\n\n. . .\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nfd_bw <- 2 * IQR(clark_shots$shot_distance) / length(clark_shots$shot_distance)^(1/3)\nclark_shots |>\n  ggplot(aes(x = shot_distance)) +\n  geom_histogram(binwidth = fd_bw)\n```\n:::\n\n\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   Split observed data into **bins**\n\n-   **Count** number of observations in each bin\n\n**Need to choose the number of bins**, adjust with:\n\n-   `bins`: number of bins (default is 30)\n\n-   `binwidth`: width of bins (overrides `bins`), various [rules of thumb](https://en.wikipedia.org/wiki/Histogram)\n\n    -   e.g., see `fd_bw` for [Freedman–Diaconis rule](https://en.wikipedia.org/wiki/Freedman%E2%80%93Diaconis_rule)\n\n-   `breaks`: vector of bin boundaries (overrides both `bins` and `binwidth`)\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-4-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Adjusting the binwidth\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n**Small** `binwidth` $\\rightarrow$ *\"undersmooth\"* / spiky\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) +\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-hist-small-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n**Large** `binwidth` $\\rightarrow$ *\"oversmooth\"* / flat\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) +\n  geom_histogram(binwidth = 25)\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-hist-large-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Adjusting the binwidth\n\n-   A binwidth that is too narrow shows too much detail\n\n    - too many bins: low bias, high variance\n\n-   A binwidth that is too wide hides detail\n\n    - too few bins: high bias, low variance\n\n-   Always pick a value that is \"just right\" ([The Goldilocks principle](https://en.wikipedia.org/wiki/Goldilocks_principle))\n\n**Try several values, the `R` / `ggplot2` default is NOT guaranteed to be an optimal choice**\n\n## A subtle point about the histogram code...\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\nBy default the bins are centered on the integers\n\n-   left-closed, right-open intervals\n-   starting at -0.5 to 0.5, 0.5 to 1.5, ...\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) +\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n**Specify center of one bin** (e.g. 0.5)\n\n-   Use `closed = \"left\"`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) +\n  geom_histogram(binwidth = 1, center = 0.5, \n                 closed = \"left\")\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-hist-shift-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## How do histograms relate to the PDF and CDF?\n\n* Histograms approximate the PDF with bins, and **points are equally likely within a bin**\n\n* PDF is the **derivative** of the cumulative distribution function (CDF)\n\n\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-hist-left-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-ecdf-right-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n# Density estimation\n\n## Kernel density estimation\n\n**Goal**: estimate the PDF $f(x)$ for all possible values (assuming it is smooth)\n\n. . .\n\nThe kernel density estimator (KDE) is $\\displaystyle \\hat{f}(x) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h} K_h(x - x_i)$\n\n. . .\n\n-   $n$: sample size\n\n-   $x$: new point to estimate $f(x)$ (does NOT have to be in the dataset!)\n\n-   $h$: **bandwidth**, analogous to histogram binwidth, ensures $\\hat{f}(x)$ integrates to 1\n\n-   $x_i$: $i$th observation in the dataset\n\n. . .\n\n-   $K_h(x - x_i)$: **kernel** function, creates **weight** given distance of $i$th observation from new point\n    -   as $|x - x_i| \\rightarrow \\infty$ then $K_h(x - x_i) \\rightarrow 0$, i.e. the further apart the $i$th observation is from $x$, the smaller the weight\n\n    -   as **bandwidth** $h$ increases, weights are more evenly spread out\n\n    -   [Choice of kernel functions](https://en.wikipedia.org/wiki/Kernel_(statistics)): Gaussian/normal, etc.\n\n    -   $K_h(x - x_i)$ is large when $x_i$ is close to $x$\n    \n## Kernel density estimation\n\nIntuition:\n    \n*  smooth each data point into a small density bumps\n*  sum all these small bumps together to obtain the final density estimate\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](../images/kde-bumps.png){fig-align='center' width=678}\n:::\n:::\n\n\n\n\n## How do we compute and display the density estimate?\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   We make **kernel density estimates** with [`geom_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) + \n  geom_density() +\n  geom_rug(alpha = 0.3)\n```\n:::\n\n\n\n-   **Pros**:\n    -   Displays full shape of distribution\n    -   Can easily layer\n    -   Add categorical variable with color\n-   **Cons**:\n    -   Need to pick bandwidth and kernel...\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## [What about the bandwidth?](https://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/)\n\nUse **Gaussian reference rule** (*rule-of-thumb*) $\\approx 1.06 \\cdot \\sigma \\cdot n^{-1/5}$ ($\\sigma$: observed standard deviation)\n\nModify the bandwidth using the `adjust` argument - **value to multiply default bandwidth by**\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) + \n  geom_density(adjust = 0.5) +\n  geom_rug(alpha = 0.3)\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/curve-noisy-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_distance)) + \n  geom_density(adjust = 2) +\n  geom_rug(alpha = 0.3)\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/curve-smooth-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Notes on density estimation\n\n*   In KDE, the bandwidth parameter is analogous to the binwidth in histograms. \n\n*   If the bandwidth is too small, the density estimate can become overly peaky and the main trends in the data may be obscured.\n\n*   If the bandwidth is too large, then smaller features in the distribution of the data may disappear\n\n*   The choice of the kernel can affect the shape of the density curve.\n\n    *   A Gaussian kernel typically gives density estimates that look bell-shaped (ish)\n\n    *   A rectangular kernel can generate the appearance of steps in the density curve  \n\n    *   Kernel choice matters less with more data points\n    \n**Density plots are often reliable and informative for large datasets but can be misleading for smaller ones.**\n    \n## Common pitfall: bounded data\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nset.seed(36)\nbounded_data <- tibble(x = runif(100))\nbounded_data |> \n  ggplot(aes(x)) +\n  geom_density() +\n  geom_rug(alpha = 0.5) +\n  stat_function(data = tibble(x = c(0, 1)),\n                fun = dunif, color = \"red\") +\n  scale_x_continuous(limits = c(-0.5, 1.5))\n```\n:::\n\n\n\n* Observe density estimates for impossible values (in the tails) - ALWAYS be mindful\n\n* [Reflection method](https://github.com/tidyverse/ggplot2/issues/3387): first perform standard KDE, then \"reflect\" tails outside of desired interval to be inside\n\n* See also: [evmix package](https://www.jstatsoft.org/article/view/v084i05)\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n:::\n:::\n\n## Use density curves and ECDFs together\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-curve-ecdf-1.png){fig-align='center' width=1536}\n:::\n:::\n\n\n\n## Code interlude: easy way to arrange multiple figures\n\nUse the [`cowplot`](https://wilkelab.org/cowplot/index.html) package to easily arrange your plots (see also [`patchwork`](https://patchwork.data-imaginist.com/))\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(cowplot)\n\nclark_shot_dens <- clark_shots |>\n  ggplot(aes(x = shot_distance)) + \n  geom_density() +\n  geom_rug(alpha = 0.3) +\n  theme_bw() +\n  labs(x = \"Shot distance (in feet)\",\n       y = \"Number of shot attempts\")\n\nclark_shot_ecdf <- clark_shots |>\n  ggplot(aes(x = shot_distance)) + \n  stat_ecdf() +\n  geom_rug(alpha = 0.3) +\n  theme_bw() +\n  labs(x = \"Shot distance (in feet)\",\n       y = \"Proportion of shot attempts\")\n\n# library(patchwork)\n# clark_shot_dens + clark_shot_ecdf\nplot_grid(clark_shot_dens, clark_shot_ecdf)\n```\n:::\n\n\n\n## Use density curves and ECDFs together\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/shot-dist-curve-ecdf-color-1.png){fig-align='center' width=1920}\n:::\n:::\n\n\n\n## Another code interlude: [collect the legends](https://patchwork.data-imaginist.com/articles/guides/layout.html#controlling-guides) with `patchwork`\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shot_dens_made <- clark_shots |>\n  ggplot(aes(x = shot_distance, \n             color = scoring_play)) + \n  geom_density() +\n  geom_rug(alpha = 0.3) +\n  labs(x = \"Shot distance (in feet)\",\n       y = \"Number of shot attempts\")\n\nclark_shot_ecdf_made <- clark_shots |>\n  ggplot(aes(x = shot_distance,\n             color = scoring_play)) + \n  stat_ecdf() +\n  geom_rug(alpha = 0.3) +\n  labs(x = \"Shot distance (in feet)\",\n       y = \"Proportion of shot attempts\")\n\nlibrary(patchwork)\nclark_shot_dens_made + clark_shot_ecdf_made + plot_layout(guides = \"collect\")\n```\n:::\n\n\n\n## Ridgeline plots\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   Check out the [`ggridges`](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html) package for a variety of customization options\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggridges)\nclark_shots |>\n  ggplot(aes(x = shot_distance, y = shot_type)) + \n  geom_density_ridges(rel_min_height = 0.01) \n```\n:::\n\n\n\n-   Useful to display conditional distributions across many levels\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Going from 1D to 2D density estimation\n\nIn 1D: estimate density $f(x)$, assuming that $f(x)$ is _smooth_:\n\n$$\n\\hat{f}(x) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h} K_h(x - x_i)\n$$\n\n. . .\n\nIn 2D: estimate joint density $f(x_1, x_2)$\n\n$$\\hat{f}(x_1, x_2) = \\frac{1}{n} \\sum_{i=1}^n \\frac{1}{h_1h_2} K\\left(\\frac{x_1 - x_{i1}}{h_1}\\right) K\\left(\\frac{x_2 - x_{i2}}{h_2}\\right)$$\n\n. . .\n\nIn 1D there's one bandwidth, now __we have two bandwidths__\n\n* $h_1$: controls smoothness as $X_1$ changes, holding $X_2$ fixed\n* $h_2$: controls smoothness as $X_2$ changes, holding $X_1$ fixed\n\nGaussian kernels are still a popular choice\n\n## Display densities for 2D data\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://www.byclb.com/TR/Tutorials/neural_networks/Ch_4_dosyalar/image044.gif){fig-align='center' width=60%}\n:::\n:::\n\n\n\n## How to read contour plots\n\nBest known in topography: outlines (contours) denote levels of elevation\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](https://preview.redd.it/2rbe8s8t7re31.jpg?auto=webp&s=eed849b180dd803d394f556432df026c4cd1dae2){fig-align='center' width=60%}\n:::\n:::\n\n\n\n\n## 2D density estimation\n\nWe can visualize all of the shot locations: (`shot_x`, `shot_y`)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  ggplot(aes(x = shot_x, y = shot_y)) +\n  geom_point(size = 4, alpha = 0.3)\n```\n:::\n\n\n\n-   Adjust transparency with `alpha` for overlapping points\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Create contours of 2D kernel density estimate (KDE)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   Use [`geom_density2d()`](https://ggplot2.tidyverse.org/reference/geom_density_2d.html) to display contour lines\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  filter(shot_y < 35) |> # remove outliers\n  ggplot(aes(x = shot_x, y = shot_y)) + \n  geom_point(size = 4, alpha = 0.3) + \n  geom_density2d() +\n  coord_fixed() +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n\n-   Extend KDE for joint density estimates in 2D (see [section 14.4.2 for details](https://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/))\n\n-   Inner lines denote \"peaks\"\n\n-   `coord_fixed()` forced a fixed ratio\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Create contours of 2D kernel density estimate (KDE)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   We make 2D KDE **contour** plots using [`geom_density2d()`](https://ggplot2.tidyverse.org/reference/geom_density_2d.html)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  filter(shot_y < 35) |> \n  ggplot(aes(x = shot_x, y = shot_y)) + \n  geom_point(size = 4, alpha = 0.3) + \n  geom_density2d(adjust = 0.1) +\n  coord_fixed() +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n\n-   Can use `adjust` to modify the multivariate bandwidth\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-17-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Contours are difficult... let's make a heatmap instead\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-  Use [`stat_density_2d()`](https://ggplot2.tidyverse.org/reference/geom_density_2d.html) and the [`after_stat()`](https://ggplot2.tidyverse.org/reference/aes_eval.html) function to make 2D KDE **heatmaps**\n\n-   May be easier to read than nested lines with color\n\n-   Default color scale is awful. Always change it.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  filter(shot_y < 35) |> \n  ggplot(aes(x = shot_x, y = shot_y)) + \n  stat_density2d(aes(fill = after_stat(level)),\n                 h = 0.6, bins = 60, geom = \"polygon\") +\n  scale_fill_gradient(low = \"midnightblue\", \n                      high = \"gold\") +\n  coord_fixed() +\n  theme(legend.position = \"bottom\")\n```\n:::\n\n\n\n**Multivariate density estimation can be difficult**\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Turn off contours and use tiles instead\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-   Divide the space into a grid and color the grid according to high/low values\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  filter(shot_y < 35) |> \n  ggplot(aes(x = shot_x, y = shot_y)) + \n  stat_density2d(aes(fill = after_stat(density)),\n                 h = 0.6, bins = 60, contour = FALSE,\n                 geom = \"raster\") +\n  # scale_fill_gradient(low = \"white\", high = \"red\") +\n  scale_fill_gradient(low = \"midnightblue\", \n                      high = \"gold\") +\n  theme(legend.position = \"bottom\") +\n  coord_fixed()\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Best alternative? Hexagonal binning\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   Use [`geom_hex()`](https://ggplot2.tidyverse.org/reference/geom_hex.html) to make **hexagonal heatmaps**\n\n-   Need to have the [`hexbin`](https://cran.r-project.org/web/packages/hexbin/index.html) package installed\n\n-   2D version of histogram\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  filter(shot_y < 35) |>\n  ggplot(aes(x = shot_x, y = shot_y)) + \n  geom_hex(binwidth = c(1, 1)) +\n  scale_fill_gradient(low = \"midnightblue\", \n                      high = \"gold\") + \n  theme(legend.position = \"bottom\") +\n  coord_fixed()\n```\n:::\n\n\n\n-   Can specify `binwidth` in both directions\n-   Avoids limitations from smoothing\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## What about shooting efficiency?\n\n-   Can compute a function of another variable inside hexagons with [`stat_summary_hex()`](https://ggplot2.tidyverse.org/reference/stat_summary_2d.html)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nclark_shots |>\n  filter(shot_y < 35) |>\n  ggplot(aes(x = shot_x, y = shot_y, \n             z = scoring_play, group = -1)) +\n  stat_summary_hex(binwidth = c(2, 2), fun = mean, \n                   color = \"black\") +\n  scale_fill_gradient(low = \"midnightblue\", \n                      high = \"gold\") + \n  theme(legend.position = \"bottom\") +\n  coord_fixed()\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Appendix: Making shot charts and drawing courts with [`sportyR`](https://sportyr.sportsdataverse.org/)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(sportyR)\nwnba_court <- geom_basketball(\"wnba\", display_range = \"offense\", rotation = 270, x_trans = -41.5)\nwnba_court +\n  geom_hex(data = clark_shots, aes(x = shot_x, y = shot_y), binwidth = c(1, 1)) + \n  scale_fill_gradient(low = \"midnightblue\", high = \"gold\")\n```\n\n::: {.cell-output-display}\n![](08-density_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n\n## Appendix: Code to build dataset\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# install.packages(\"wehoop\")\nlibrary(wehoop)\nwnba_pbp <- load_wnba_pbp(2024)\nclark_shots <- wnba_pbp |> \n  filter(shooting_play) |> \n  filter(str_detect(text, \"Caitlin Clark\")) |> \n  filter(!str_detect(text, \"Caitlin Clark assists\")) |> \n  filter(!str_detect(text, \"free throw\")) |> \n  mutate(\n    shot_x = coordinate_x_raw - 25,\n    shot_y = coordinate_y_raw,\n    shot_distance = sqrt((abs(shot_x) ^ 2) + shot_y ^ 2), \n    shot_type = type_text,\n    scoring_play,\n    score_value,\n    .keep = \"none\"\n  )\n```\n:::",
    "supporting": [
      "08-density_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}