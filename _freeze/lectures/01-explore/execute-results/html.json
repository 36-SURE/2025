{
  "hash": "06b4848b740ad46022e7337b322e45a7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring data: into the `tidyverse`\"\nsubtitle: \"<br>SURE 2025<br><br>Department of Statistics & Data Science<br>Carnegie Mellon University\"\nfooter:  \"[36-SURE.github.io/2025](https://36-sure.github.io/2025)\"\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    smaller: true\n    slide-number: c/t\n    code-line-numbers: false\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n# Data science workflow\n\n## Workflow diagram\n\n[![Source: R for Data Science (2e)](https://r4ds.hadley.nz/diagrams/data-science/base.png){width=\"800\"}](https://r4ds.hadley.nz/intro)\n\n-   **Exploring data: data wrangling and data visualization**\n\n-   Aspects of data wrangling\n\n    -   import: load in data (e.g., `read_csv()`)\n\n    -   tidy: each row is an observation, each column is a variable\n\n    -   transform: filter observations, create new variables, etc.\n\n## Exploratory data analysis\n\n-   What is the goal of EDA?\n    -   to perform initial investigations on the data in order to better understand the data, discover trends/patterns, spot anomalies, etc.\n\n. . .\n\n-   [\"EDA is an iterative cycle\"](https://r4ds.hadley.nz/eda)\n\n    -   questions about data ⟶ wrangling ⟶ visualization\n\n. . .\n\n-   [\"EDA is a state of mind\"](https://r4ds.hadley.nz/eda)\n\n::: aside\nThe term EDA was coined by statistician John Tukey in the 1970s.\n:::\n\n## Exploratory data analysis (cont'd)\n\n-   Data can be explored numerically (tables, descriptive statistics, etc.) or visually (graphs)\n\n-   Examples of questions\n\n    -   What type of variation do the variables display?\n\n    -   What type of relationships exist between variables?\n\n. . .\n\n-   EDA is **NOT** a replacement for statistical inference and learning\n\n. . .\n\n-   EDA is an important and necessary step to build intuition\n\n## First example: MLB batting\n\n-   Import `Batting` table of historical batting statistics from the `Lahman`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # load the tidyverse\nlibrary(Lahman) # load the Lahman package to access its datasets\nBatting <- as_tibble(Batting) # initialize the Batting dataset\n```\n:::\n\n\n\n. . .\n\n-   Basic info about the `Batting` dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# number of rows and columns\n# can also do nrow(Batting) and ncol(Batting)\ndim(Batting) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 113799     22\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(Batting)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n::: aside\n`tbl` (pronounced `tibble`) is the `tidyverse` way of storing tabular data, like a spreadsheet or `data.frame`\n:::\n\n## First example: MLB batting\n\n-   View the first 6 (by default) rows with `head()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# try just typing Batting into your console, what happens?\n# also try glimpse(Batting)\nhead(Batting) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n6 aardsda01   2010     1 SEA    AL       53     0     0     0     0     0     0\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n-   Is the `Batting` dataset tidy?\n\n    -   Each row: a player's season stint with a team (i.e. players can play for multiple teams in year)\n\n    -   Each column: different measurement or recording about the player-team-season observation (get all column names with `colnames(Batting)` or `names(Batting)`)\n\n## Descriptive statistics\n\nSummarize quantitative (e.g. `yearID`, `AB`) and categorical (e.g. `teamID`, `lgID`) variables in different ways...\n\n. . .\n\n-   Summary statistics for quantitative variables with the `summary()` function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(Batting$yearID)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   1871    1939    1979    1970    2004    2023 \n```\n\n\n:::\n:::\n\n\n\n-   Counts of categorical variables with the `table()` function\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# be careful it ignores NA values\n# can do table(Batting$lgID, useNA = \"always\")\ntable(Batting$lgID)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   AA    AL    FL    NA    NL    PL    UA \n 1893 52599   472   737 57615   149   334 \n```\n\n\n:::\n:::\n\n\n\n# Data wrangling with `dplyr`\n\n## The `dplyr` package\n\n-   `dplyr` is a package within the `tidyverse` with functions for data wrangling\n\n-   The `dplyr` data verbs for manipulating data\n\n    -   `filter()`\n\n    -   `select()`\n\n    -   `arrange()`\n\n    -   `mutate()`\n\n    -   `group_by()`\n\n    -   `summarize()`\n\n## `filter()`\n\n-   **Use `filter()` to extract ROWS (observations) that meet certain conditions**\n\n-   **Need to specify a logical condition (aka boolean expression)**\n\n## `filter()`\n\nExample: Extract batting stats for 2 leagues AL and NL only\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(Batting, lgID %in% c(\"AL\", \"NL\")) # or filter(Batting, lgID == \"AL\" | lgID == \"NL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 110,214 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n 2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n 3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n 4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n 5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n 6 aardsda01   2010     1 SEA    AL       53     0     0     0     0     0     0\n 7 aardsda01   2012     1 NYA    AL        1     0     0     0     0     0     0\n 8 aardsda01   2013     1 NYN    NL       43     0     0     0     0     0     0\n 9 aardsda01   2015     1 ATL    NL       33     1     0     0     0     0     0\n10 aaronha01   1954     1 ML1    NL      122   468    58   131    27     6    13\n# ℹ 110,204 more rows\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## `filter()`\n\nExample: Extract batting stats for Pirates players in 2022\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiple conditions\nfilter(Batting, yearID == 2022 & teamID == \"PIT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 68 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 alforan01   2022     1 PIT    NL        2     4     0     1     0     0     0\n 2 alldrca01   2022     1 PIT    NL        1     0     0     0     0     0     0\n 3 allengr01   2022     1 PIT    NL       46   118    17    22     4     0     2\n 4 andujmi01   2022     2 PIT    NL        9    36     4     9     3     1     0\n 5 baeji01     2022     1 PIT    NL       10    33     5    11     3     0     0\n 6 bandaan01   2022     1 PIT    NL       23     0     0     0     0     0     0\n 7 banuema01   2022     2 PIT    NL       31     0     0     0     0     0     0\n 8 bednada01   2022     1 PIT    NL       45     0     0     0     0     0     0\n 9 beedety01   2022     2 PIT    NL       25     0     0     0     0     0     0\n10 briceau01   2022     1 PIT    NL        4     0     0     0     0     0     0\n# ℹ 58 more rows\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## Logical conditions\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   `x < y`: less than\n-   `x <= y`: less than or equal to\n-   `x == y`: equal to\n-   `x != y`: not equal to\n-   `x > y`: greater than\n-   `x >= y`: greater than or equal to\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   `x %in% y`: whether the value is present in a given vector\n-   `is.na(x)`: is missing\n-   `!is.na(x)`: is not missing\n-   `x & y`: and\n-   `x | y`: or\n-   `!x`: not\n:::\n:::\n\n... and basically anything that returns a TRUE/FALSE value\n\n## Common mistakes\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   `=` instead of `==`\n\nnay\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(Batting, team = \"PIT\")\n```\n:::\n\n\n\nyay\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(Batting, team == \"PIT\")\n```\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n-   Forgetting quotes (for string/character)\n\nnay\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(Batting, team == PIT)\n```\n:::\n\n\n\nyay\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(Batting, team == \"PIT\")\n```\n:::\n\n\n:::\n:::\n\n## `select()`\n\n-   **Use `select()` to extract COLUMNS (variables) of interest**\n\n-   **Just simply specify the column names...**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(Batting, playerID, yearID, G, AB, R, H, HR, BB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 113,799 × 8\n   playerID  yearID     G    AB     R     H    HR    BB\n   <chr>      <int> <int> <int> <int> <int> <int> <int>\n 1 aardsda01   2004    11     0     0     0     0     0\n 2 aardsda01   2006    45     2     0     0     0     0\n 3 aardsda01   2007    25     0     0     0     0     0\n 4 aardsda01   2008    47     1     0     0     0     0\n 5 aardsda01   2009    73     0     0     0     0     0\n 6 aardsda01   2010    53     0     0     0     0     0\n 7 aardsda01   2012     1     0     0     0     0     0\n 8 aardsda01   2013    43     0     0     0     0     0\n 9 aardsda01   2015    33     1     0     0     0     0\n10 aaronha01   1954   122   468    58   131    13    28\n# ℹ 113,789 more rows\n```\n\n\n:::\n:::\n\n\n\n## `mutate()`\n\n-   **Use `mutate()` to create new variables**\n\n-   New variables created via `mutate()` are usually based on existing variables\n\n    -   Make sure to give your new variable a name\n\n    -   Note that naming the new variable the same as the existing variable will overwrite the original column\n\n## `mutate()`\n\nExample: Get the batting average and strikeout-to-walk ratio for every player\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmutate(Batting, batting_avg = H / AB, so_bb_ratio = SO / BB)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 113,799 × 24\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n 2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n 3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n 4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n 5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n 6 aardsda01   2010     1 SEA    AL       53     0     0     0     0     0     0\n 7 aardsda01   2012     1 NYA    AL        1     0     0     0     0     0     0\n 8 aardsda01   2013     1 NYN    NL       43     0     0     0     0     0     0\n 9 aardsda01   2015     1 ATL    NL       33     1     0     0     0     0     0\n10 aaronha01   1954     1 ML1    NL      122   468    58   131    27     6    13\n# ℹ 113,789 more rows\n# ℹ 12 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>, batting_avg <dbl>,\n#   so_bb_ratio <dbl>\n```\n\n\n:::\n:::\n\n\n\n## `arrange()`\n\n-   Sort observations (rows) by variables (columns)\n\n    -   ascending order is the default (low to high for numeric columns, alphabetical order for character columns)\n\n. . .\n\nExample: Who holds the single-season home run record?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(Batting, desc(HR)) # desc() for descending order\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 113,799 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 bondsba01   2001     1 SFN    NL      153   476   129   156    32     2    73\n 2 mcgwima01   1998     1 SLN    NL      155   509   130   152    21     0    70\n 3 sosasa01    1998     1 CHN    NL      159   643   134   198    20     0    66\n 4 mcgwima01   1999     1 SLN    NL      153   521   118   145    21     1    65\n 5 sosasa01    2001     1 CHN    NL      160   577   146   189    34     5    64\n 6 sosasa01    1999     1 CHN    NL      162   625   114   180    24     2    63\n 7 judgeaa01   2022     1 NYA    AL      157   570   133   177    28     0    62\n 8 marisro01   1961     1 NYA    AL      161   590   132   159    16     4    61\n 9 ruthba01    1927     1 NYA    AL      151   540   158   192    29     8    60\n10 ruthba01    1921     1 NYA    AL      152   540   177   204    44    16    59\n# ℹ 113,789 more rows\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## `arrange()`\n\nExample: arrange by multiple columns --- at bats from high to low (first sort), then home runs from low to high (second sort) --- variable order matters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\narrange(Batting, desc(AB), HR)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 113,799 × 22\n   playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n   <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n 1 rolliji01   2007     1 PHI    NL      162   716   139   212    38    20    30\n 2 wilsowi02   1980     1 KCA    AL      161   705   133   230    28    15     3\n 3 suzukic01   2004     1 SEA    AL      161   704   101   262    24     5     8\n 4 samueju01   1984     1 PHI    NL      160   701   105   191    36    19    15\n 5 pierrju01   2006     1 CHN    NL      162   699    87   204    32    13     3\n 6 cashda01    1975     1 PHI    NL      162   699   111   213    40     3     4\n 7 alouma01    1969     1 PIT    NL      162   698   105   231    41     6     1\n 8 reyesjo01   2005     1 NYN    NL      161   696    99   190    24    17     7\n 9 jensewo01   1936     1 PIT    NL      153   696    98   197    34    10    10\n10 soriaal01   2002     1 NYA    AL      156   696   128   209    51     2    39\n# ℹ 113,789 more rows\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## Performing multiple operations\n\n-   What if we want to perform several different tasks using multiple `dplyr` verbs?\n\n. . .\n\n-   Introducing the pipe operator `|>`\n\n. . .\n\n-   You might have seen the `magrittr` pipe `%>%`...\n\n    -   ...from the `maggritr` package, automatically loaded when loading `tidyverse`\n\n-   Recently, many people (including Hadley Wickham) have switched to `|>`, the built-in \"native\" pipe to base `R`\n\n    -   [What are the differences?](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/)\n\n::: aside\nShortcut for the pipe operator in RStudio: Command (or Ctrl) + Shift + M\n:::\n\n## The pipe operator\n\n-   Use `|>` to perform a sequence of operations\n\n-   The pipe takes an object (e.g., tibble, data frame, matrix, vector, etc.) on the left and passes it as the first argument of the function on the right\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# the workflow\nobject |>\n  first_operation(...) |>\n  second_operation(...) |> \n  .\n  .\n  .\n  last_operation(...)\n```\n:::\n\n\n\n## Performing multiple operations\n\nExample: Which Pirates players had the highest batting average in 2022, among those with at least 50 at bats?\n\n. . .\n\nWhat are the tasks to be done here?\n\n. . .\n\n-   `filter()`: only Pirates players in 2022 with at least 50 at bats\n\n-   `mutate()`: create a new column for batting average\n\n-   `arrange()`: sort by batting average in descending order\n\n-   `select()`: report player name, at bats, and batting average\n\n## Performing multiple operations\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBatting |> \n  filter(yearID == 2022, teamID == \"PIT\", AB >= 50) |> \n  mutate(batting_avg = H / AB) |> \n  arrange(desc(batting_avg)) |> \n  select(playerID, AB, batting_avg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 23 × 3\n   playerID     AB batting_avg\n   <chr>     <int>       <dbl>\n 1 newmake01   288       0.274\n 2 reynobr01   542       0.262\n 3 hayeske01   505       0.244\n 4 marisja01    77       0.234\n 5 perezro02    60       0.233\n 6 castrro01   253       0.233\n 7 cruzon01    331       0.233\n 8 gamelbe01   371       0.232\n 9 chavimi01   401       0.229\n10 vogelda01   237       0.228\n# ℹ 13 more rows\n```\n\n\n:::\n:::\n\n\n\n. . .\n\nWithout the pipe, the code looks every ugly with functions nested within functions...\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(arrange(mutate(filter(Batting, yearID == 2022, teamID == \"PIT\", AB >= 50), batting_avg = H / AB), \ndesc(batting_avg)), playerID, AB, batting_avg)\n```\n:::\n\n\n\n## `summarize()` (by itself)\n\n-   Use `summarize()` to collapse the data down to a single row (per group) by aggregating variables into single values\n\n-   Useful for computing summaries (e.g., mean, median, max, min, correlation, etc.)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBatting |> \n  summarize(median_at_bats = median(AB))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  median_at_bats\n           <int>\n1             44\n```\n\n\n:::\n\n```{.r .cell-code}\nBatting |> \n  summarize(cor_ab_hr = cor(AB, HR))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  cor_ab_hr\n      <dbl>\n1     0.706\n```\n\n\n:::\n:::\n\n\n\n## `group_by()` and `summarize()`\n\n-   `group_by()` converts the data into a \"grouped tbl\" where operations are performed by group\n\n    -   i.e., it splits the data into groups based on values in a column\n\n-   `group_by()` becomes powerful when combining with `summarize()`\n\n-   After the operation at the group-level is done, use `ungroup()` to remove grouping\n\n## `group_by()` and `summarize()`\n\nExample: How many home runs, strike outs, and walks did each team accumulate in each season from 2015 to 2019?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBatting |> \n  filter(yearID %in% 2015:2019) |> \n  group_by(teamID) |> \n  summarize(total_hr = sum(HR), total_so = sum(SO), total_bb = sum(BB)) |> \n  arrange(desc(total_hr))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 30 × 4\n   teamID total_hr total_so total_bb\n   <fct>     <int>    <int>    <int>\n 1 NYA        1209     6659     2839\n 2 HOU        1159     6294     2759\n 3 TOR        1139     6741     2752\n 4 LAN        1111     6751     2991\n 5 BAL        1103     6914     2162\n 6 TEX        1041     7008     2572\n 7 SEA        1036     6693     2489\n 8 MIN        1035     6694     2604\n 9 OAK        1033     6474     2610\n10 MIL        1031     7434     2724\n# ℹ 20 more rows\n```\n\n\n:::\n:::\n\n\n\n# The lesser-known stars of `dplyr`\n\n## `count()`\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n`count()` returns the number of observations in each group\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBatting |> \n  count(lgID, name = \"freq\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  lgID   freq\n  <fct> <int>\n1 AA     1893\n2 AL    52599\n3 FL      472\n4 NA      737\n5 NL    57615\n6 PL      149\n7 UA      334\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# recall that in base R...\ntable(Batting$lgID)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   AA    AL    FL    NA    NL    PL    UA \n 1893 52599   472   737 57615   149   334 \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\nThis can also be done with `group_by()` and `summarize()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# note: count is a \"shortcut\" of this\nBatting |> \n  group_by(lgID) |> \n  summarize(freq = n()) |> \n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 2\n  lgID   freq\n  <fct> <int>\n1 AA     1893\n2 AL    52599\n3 FL      472\n4 NA      737\n5 NL    57615\n6 PL      149\n7 UA      334\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `slice_*()` family for subsetting rows\n\n-   `slice()`: extract rows (observations) based on the row index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBatting |> \n  slice(c(1, 99, 101, 500))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n2 abbotgl01   1973     1 OAK    AL        5     0     0     0     0     0     0\n3 abbotgl01   1975     1 OAK    AL       30     0     0     0     0     0     0\n4 adamshe01   1949     1 CHA    AL       56   208    26    61     5     3     0\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## `slice_*()` family for subsetting rows\n\n-   `slice_head()` / `slice_tail()`: extract the first / last `n` rows\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Batting |> slice_tail(n = 5)\nBatting |> \n  slice_head(n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n1 aardsda01   2004     1 SFN    NL       11     0     0     0     0     0     0\n2 aardsda01   2006     1 CHN    NL       45     2     0     0     0     0     0\n3 aardsda01   2007     1 CHA    AL       25     0     0     0     0     0     0\n4 aardsda01   2008     1 BOS    AL       47     1     0     0     0     0     0\n5 aardsda01   2009     1 SEA    AL       73     0     0     0     0     0     0\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## `slice_*()` family for subsetting rows\n\n-   `slice_min()` / `slice_max()`: extract rows with the smallest or largest values of a variable\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# single-season home run record (top 5)\nBatting |> \n  slice_max(HR, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 22\n  playerID  yearID stint teamID lgID      G    AB     R     H   X2B   X3B    HR\n  <chr>      <int> <int> <fct>  <fct> <int> <int> <int> <int> <int> <int> <int>\n1 bondsba01   2001     1 SFN    NL      153   476   129   156    32     2    73\n2 mcgwima01   1998     1 SLN    NL      155   509   130   152    21     0    70\n3 sosasa01    1998     1 CHN    NL      159   643   134   198    20     0    66\n4 mcgwima01   1999     1 SLN    NL      153   521   118   145    21     1    65\n5 sosasa01    2001     1 CHN    NL      160   577   146   189    34     5    64\n# ℹ 10 more variables: RBI <int>, SB <int>, CS <int>, BB <int>, SO <int>,\n#   IBB <int>, HBP <int>, SH <int>, SF <int>, GIDP <int>\n```\n\n\n:::\n:::\n\n\n\n## `slice_*()` family for subsetting rows\n\n-   `slice_sample()`: randomly sample a specified number / fraction of observation in the data\n\n**Useful for performing resampling (e.g., bootstrap, cross-validation, etc.)**\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# randomly sample 1000 rows (without replacement, by default)\nBatting |> \n  slice_sample(n = 1000)\n\n# randomly sample 70% of the rows, with replacement\nBatting |> \n  slice_sample(prop = 0.7, replace = TRUE)\n```\n:::\n\n\n\n## Putting it all together\n\nExample: Get batting stats for each year: each row is a year with the following variables\n\n-   total hits, home runs, strikeouts, walks, atbats\n-   total batting average for each year = total H / total AB\n-   only keeps AL and NL leagues\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_batting <- Batting |>\n  filter(lgID %in% c(\"AL\", \"NL\")) |>\n  group_by(yearID) |>\n  summarize(total_h = sum(H, na.rm = TRUE),\n            total_hr = sum(HR, na.rm = TRUE),\n            total_so = sum(SO, na.rm = TRUE),\n            total_bb = sum(BB, na.rm = TRUE),\n            total_ab = sum(AB, na.rm = TRUE)) |>\n  mutate(batting_avg = total_h / total_ab)\n```\n:::\n\n\n\n## Putting it all together\n\nWhat are the top three years with the most HRs?\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_batting |> \n  slice_max(total_hr, n = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 7\n  yearID total_h total_hr total_so total_bb total_ab batting_avg\n   <int>   <int>    <int>    <int>    <int>    <int>       <dbl>\n1   2019   42039     6776    42823    15895   166651       0.252\n2   2017   42215     6105    40104    15829   165567       0.255\n3   2021   39484     5944    42145    15794   161941       0.244\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# or this \nyearly_batting |>\n  arrange(desc(total_hr)) |>\n  slice(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 7\n  yearID total_h total_hr total_so total_bb total_ab batting_avg\n   <int>   <int>    <int>    <int>    <int>    <int>       <dbl>\n1   2019   42039     6776    42823    15895   166651       0.252\n2   2017   42215     6105    40104    15829   165567       0.255\n3   2021   39484     5944    42145    15794   161941       0.244\n```\n\n\n:::\n:::\n\n\n\n## Putting it all together\n\nWhich years have the best and worst strikeout to walk ratios?\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyearly_batting |>\n  mutate(so_bb_ratio = total_so / total_bb) |>\n  arrange(so_bb_ratio) |>\n  slice(c(1, n()))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 8\n  yearID total_h total_hr total_so total_bb total_ab batting_avg so_bb_ratio\n   <int>   <int>    <int>    <int>    <int>    <int>       <dbl>       <dbl>\n1   1893   15913      460     3341     6143    56898       0.280       0.544\n2   1879    6171       58     1843      508    24155       0.255       3.63 \n```\n\n\n:::\n:::\n\n\n\n## What's next?\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n**DATA VISUALIZATION**\n\n> The simple graph has brought more information to the data analyst’s mind than any other device. — John Tukey\n\n-   Use `ggplot2` (and the grammar of graphics) to visually explore data\n\n-   More intuitive than base `R` plotting\n\n-   Different types of visualizations for categorical and quantitative data, faceting, etc.\n\n-   `dplyr` verbs and `|>` leads to natural pipeline for EDA\n:::\n\n::: {.column width=\"50%\" style=\"text-align: center;\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](01-explore_files/figure-revealjs/unnamed-chunk-33-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Check out this song\n\n\n\n{{< video https://youtu.be/p8Py9C8iq2s width=\"800\" height=\"600\" >}}\n\n",
    "supporting": [
      "01-explore_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}