{
  "hash": "da3557b9dc482bb3b14403fa60743c26",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data visualization: quantitative data\"\nauthor: \"<br>SURE 2025<br><br>Department of Statistics & Data Science<br>Carnegie Mellon University\"\nfooter:  \"[36-SURE.github.io/2025](https://36-sure.github.io/2025)\"\nformat:\n  revealjs:\n    theme: theme.scss\n    chalkboard: true\n    smaller: true\n    slide-number: c/t\n    code-line-numbers: false\n    linestretch: 1.25\n    html-math-method:\n      method: mathjax\n      url: \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"\n---\n\n\n\n\n\n# Background\n\n## Quantitative data\n\nTwo different versions of quantitative data:\n\n**Discrete**: countable and has clear space between values (i.e. whole number only)\n\n-   Examples: number of goals scored in a game, number of children in a family\n\n**Continuous**: can take any value within some interval\n\n-   Examples: price of houses in Pittsburgh, water temperature, wind speed\n\n## Data\n\nTaylor Swift songs via the [`taylor` package](https://taylor.wjakethompson.com/articles/taylor) (data dictionary [here](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-10-17))\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntheme_set(theme_light())\nlibrary(taylor)\nnames(taylor_all_songs)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"album_name\"          \"ep\"                  \"album_release\"      \n [4] \"track_number\"        \"track_name\"          \"artist\"             \n [7] \"featuring\"           \"bonus_track\"         \"promotional_release\"\n[10] \"single_release\"      \"track_release\"       \"danceability\"       \n[13] \"energy\"              \"key\"                 \"loudness\"           \n[16] \"mode\"                \"speechiness\"         \"acousticness\"       \n[19] \"instrumentalness\"    \"liveness\"            \"valence\"            \n[22] \"tempo\"               \"time_signature\"      \"duration_ms\"        \n[25] \"explicit\"            \"key_name\"            \"mode_name\"          \n[28] \"key_mode\"            \"lyrics\"             \n```\n\n\n:::\n\n```{.r .cell-code}\ntaylor_all_songs <- taylor_all_songs |> \n  mutate(duration = duration_ms / 60000)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n:::\n\n\n\n# 1D quantitative data\n\n## Summarizing 1D quantitative data\n\n-   Center: mean, median, number and location of modes\n\n. . .\n\n-   Spread: range, variance, standard deviation, IQR, etc.\n\n. . .\n\n-   Shape: skew vs symmetry, outliers, heavy vs light tails, etc.\n\n. . .\n\nCompute various statistics in `R` with `summary()`, `mean()`, `median()`, `quantile()`, `range()`, `sd()`, `var()`, etc.\n\n. . .\n\nExample: Summarizing the duration of Taylor Swift songs\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nsummary(taylor_all_songs$duration)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n  2.198   3.543   3.930   3.985   4.343  10.217      12 \n```\n\n\n:::\n\n```{.r .cell-code}\nsd(taylor_all_songs$duration, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7527544\n```\n\n\n:::\n:::\n\n\n\n## Boxplots visualize summary statistics\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\nPros:\n\n-   Displays outliers, percentiles, spread, skew\n\n-   Useful for side-by-side comparison\n\nCons:\n\n-   Does not display the full distribution shape\n\n-   Does not display modes\n\n[The expert weighed in...](https://twitter.com/CMUAnalytics/status/1111695744271114241)\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration)) +\n  geom_boxplot() +\n  theme(axis.text.y = element_blank())\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-5-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Histograms display 1D continuous distributions\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n$\\displaystyle \\text{# total obs.} = \\sum_{j=1}^k \\text{# obs. in bin }j$\n\nPros:\n\n-   Displays full shape of distribution\n\n-   Easy to interpret\n\nCons:\n\n-   Have to choose number of bins and bin locations (will revisit later)\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-6-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Display the data points directly with beeswarm plots\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\nPros:\n\n-   Displays each data point\n\n-   Easy to view full shape of distribution\n\nCons:\n\n-   Can be overbearing with large datasets\n\n-   Which algorithm for arranging points?\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggbeeswarm)\ntaylor_all_songs |> \n  ggplot(aes(x = duration, y = \"\")) +\n  geom_beeswarm(cex = 2)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-7-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Smooth summary with violin plots\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\nPros:\n\n-   Displays full shape of distribution\n\n-   Can easily layer...\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration, y = \"\")) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-8-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n\n\n## Smooth summary with violin plots + box plots\n\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\nPros:\n\n-   Displays full shape of distribution\n\n-   Can easily layer... with box plots on top\n\nCons:\n\n-   Summary of data via density estimate\n\n-   Mirror image is duplicate information\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration, y = \"\")) +\n  geom_violin() +\n  geom_boxplot(width = 0.4)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-9-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## What do visualizations of continuous distributions display?\n\nProbability that continuous variable $X$ takes a particular value is 0\n\ne.g. $P($ `duration` $= 3) = 0$ (why?)\n\nFor continuous variables, the cumulative distribution function (CDF) is $$F(x) = P(X \\leq x)$$\n\nFor $n$ observations, the empirical CDF (ECDF) can be computed based on the observed data $$\\hat{F}_n(x)  = \\frac{\\text{# obs. with variable} \\leq x}{n} = \\frac{1}{n} \\sum_{i=1}^{n} I (x_i \\leq x)$$\n\nwhere $I()$ is the indicator function, i.e. `ifelse(x_i <= x, 1, 0)`\n\n## Display full distribution with ECDF plot\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\nPros:\n\n-   Displays all of your data at once\n\n-   As $n \\rightarrow \\infty$, the ECDF $\\hat F_n(x)$ converges to the true CDF $F(x)$\n\nCons:\n\n-   What are the cons?\n\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration)) +\n  stat_ecdf()\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-10-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Rug plots display raw data\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\nPros:\n\n-   Displays raw data points\n\n-   Useful supplement for summaries and 2D plots\n\nCons:\n\n-   Can be overbearing for large datasets\n\n\n:::\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration)) +\n  geom_rug(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-11-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Rug plots supplement other displays\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration)) +\n  geom_histogram() +\n  geom_rug(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-12-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = duration)) +\n  stat_ecdf() +\n  geom_rug(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-13-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n\n# 2D quantitative data\n\n## Summarizing 2D quantitative data\n\n*   Direction/trend (positive, negative)\n\n*   Strength of the relationship (strong, moderate, weak)\n\n*   Linearity (linear, non-linear)\n\n. . .\n\nBig picture\n\n*   Scatterplots are by far the most common visual\n\n*   Regression analysis is by far the most popular analysis (we will have a class on this)\n\n*   Relationships may vary across other variables, e.g., categorical variables\n\n\n\n## Making scatterplots\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-   Use `geom_point()`\n\n-   Displaying the joint (bivariate) distribution\n\n-   What is the obvious flaw with this plot?\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-14-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n## Making scatterplots: always adjust the transparency (`alpha`)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-   Adjust the transparency of points via `alpha` to visualize overlap\n\n-   Provides better understanding of joint frequency\n\n-   Especially important with larger datasets\n\n-   See also: [`ggblend`](https://mjskay.github.io/ggblend/)\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-15-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Summarizing 2D quantitative data\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-   Scatterplot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-16-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-   Correlation coefficient\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncor(taylor_all_songs$loudness, \n    taylor_all_songs$energy, \n    use = \"complete.obs\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7910765\n```\n\n\n:::\n:::\n\n\n\nNote: the default correlation you get from `cor()` is Pearson correlation coefficient\n\nOther correlations:\n\n*   [Spearman's correlation](https://en.wikipedia.org/wiki/Spearman's_rank_correlation_coefficient)\n\n*   [Kendall rank correlation coefficient](https://en.wikipedia.org/wiki/Kendall_rank_correlation_coefficient)\n\n*   and more\n\n:::\n:::\n\n## When the correlation's high...\n\n\n\n{{< video https://youtu.be/D5hxMQNHyfc width=\"800\" height=\"600\" >}}\n\n\n\n\n## Displaying trend line: linear regression (a preview)\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n-   Display regression line for `energy ~ loudness`\n\n-   95% confidence intervals by default\n\n-   Estimating the conditional expectation of `energy` | `loudness`\n\n    -   i.e., $\\mathbb{E}[$ `energy` $\\mid$ `loudness` $]$\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5) +\n  geom_smooth(method = \"lm\", linewidth = 2)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-18-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Summarizing 2D quantitative data\n\n::: columns\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\nAdd rug plots to supplement scatterplot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  ggplot(aes(x = loudness, y = energy)) +\n  geom_point(color = \"darkred\", size = 4, alpha = 0.5) +\n  geom_rug(alpha = 0.4)\n```\n:::\n\n\n\n:::\n\n\n::: {.column width=\"50%\" style=\"text-align: left;\"}\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-20-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n:::\n:::\n\n\n\n\n## Pairs plot\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(GGally)\ntaylor_all_songs |> \n  select(danceability, energy, loudness, tempo) |> \n  ggpairs()\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-21-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n# Continuous by categorical data\n\n## Continuous by categorical: side by side plots\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |>\n  ggplot(aes(x = duration, y = album_name)) +\n  geom_violin() +\n  geom_boxplot(width = 0.4)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-22-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Continuous by categorical: color\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |>\n  ggplot(aes(x = duration, color = album_name)) +\n  stat_ecdf(linewidth = 1) +\n  scale_color_albums() + # from the taylor package \n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-23-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## Continuous by categorical: ridgeline plot (joyplot)\n\nFor more, see [this tutorial](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggridges)\ntaylor_all_songs |> \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |>\n  ggplot(aes(x = duration, y = album_name)) +\n  geom_density_ridges(scale = 1)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-24-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## What about for histograms?\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |>\n  ggplot(aes(x = duration, fill = album_name)) +\n  geom_histogram(alpha = 0.6, bins = 15) +\n  scale_fill_albums()\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-25-1.png){fig-align='center' width=960}\n:::\n:::\n\n\n\n## What about facets?\n\n[Difference between `facet_wrap` and `facet_grid`](https://ggplot2-book.org/facet)\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |>\n  ggplot(aes(x = duration)) +\n  geom_histogram(bins = 15) +\n  facet_wrap(~ album_name, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-26-1.png){fig-align='center' width=1440}\n:::\n:::\n\n\n\n## What about facets?\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntaylor_all_songs |> \n  filter(album_name %in% c(\"Lover\", \"folklore\", \"evermore\", \"Midnights\")) |>\n  ggplot(aes(x = duration)) +\n  geom_histogram(bins = 15) +\n  facet_grid(album_name ~ ., margins = TRUE)\n```\n\n::: {.cell-output-display}\n![](04-quantitative_files/figure-revealjs/unnamed-chunk-27-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\n<!-- ::: columns -->\n\n<!-- ::: {.column width=\"50%\" style=\"text-align: left;\"} -->\n\n<!-- c1 -->\n\n<!-- ::: -->\n\n<!-- ::: {.column width=\"50%\" style=\"text-align: left;\"} -->\n\n<!-- c2 -->\n\n<!-- ::: -->\n\n<!-- ::: -->\n",
    "supporting": [
      "04-quantitative_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}